"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("fs");
const fs_1 = require("fs");
const gatsby_node_1 = require("../gatsby-node");
const mockOnPostBuildArgs = {
    reporter: {
        success: jest.fn()
    }
};
describe("gatsby-plugin-verify-brave Gatsby Node API", () => {
    describe("onPostBuild hook", () => {
        it("throws if no plugin options are provided", async () => {
            await expect(gatsby_node_1.onPostBuild(mockOnPostBuildArgs, undefined)).rejects.toThrowErrorMatchingInlineSnapshot(`"No options passed to gatsby-plugin-verify-brave! Please see usage in package README."`);
        });
        it("throws if no token is provided in plugin options", async () => {
            await expect(gatsby_node_1.onPostBuild(mockOnPostBuildArgs, { domain: "test.dev" })).rejects.toThrowErrorMatchingInlineSnapshot(`"No \`token\` passed to gatsby-plugin-brave! Please see usage in package README."`);
        });
        it("throws if no domain is provided in plugin options", async () => {
            await expect(gatsby_node_1.onPostBuild(mockOnPostBuildArgs, {
                token: "abcdefABCDEF0123456789"
            })).rejects.toThrowErrorMatchingInlineSnapshot(`"No \`domain\` passed to gatsby-plugin-brave! Please see usage in package README."`);
        });
        it("works as expected, given the correct options", async () => {
            await gatsby_node_1.onPostBuild(mockOnPostBuildArgs, {
                domain: "test.dev",
                token: "abcdefABCDEF0123456789"
            });
            expect(fs_1.promises.mkdir).toHaveBeenCalled();
            expect(fs_1.promises.mkdir.mock.calls)
                .toMatchInlineSnapshot(`
        Array [
          Array [
            "./public/.well-known",
            Object {
              "recursive": true,
            },
          ],
        ]
      `);
            expect(fs_1.promises.writeFile).toHaveBeenCalled();
            expect(fs_1.promises.writeFile.mock.calls)
                .toMatchInlineSnapshot(`
        Array [
          Array [
            "public/.well-known/brave-rewards-verification.txt",
            "This is a Brave Rewards publisher verification file.

        Domain: test.dev
        Token: abcdefABCDEF0123456789",
          ],
        ]
      `);
            expect(mockOnPostBuildArgs.reporter.success).toHaveBeenCalled();
            expect(mockOnPostBuildArgs.reporter.success.mock.calls)
                .toMatchInlineSnapshot(`
        Array [
          Array [
            "Brave Rewards verification file created",
          ],
        ]
      `);
        });
    });
});
//# sourceMappingURL=gatsby-node.js.map