{"expireTime":9007200850472567000,"key":"transformer-remark-markdown-html-7220b094ff94ec8255765cad9eb63f7e-gatsby-remark-codefencegatsby-remark-katexgatsby-remark-prismjsgatsby-remark-embed-youtube-","val":"<h2>A Note about installing Arch Linux</h2>\n<p>There's a good chance by the time you are reading this that it is out of date, to stay up to date on Arch Linux Installs checkout the <a href=\"https://wiki.archlinux.org/index.php/Installation_guide\">Arch Wiki</a></p>\n<h2>A Note about UEFI</h2>\n<p>UEFI (Unified Extensible Firmware Interface) is replacing BIOS (Basic-Input-Output system), if you are using modern hardware you are assuredly using UEFI. If you are interested in reading more about why checkout this excellent <a href=\"https://www.howtogeek.com/56958/htg-explains-how-uefi-will-replace-the-bios/\">article</a> explaining some key differences</p>\n<h2>Set keyboard layout</h2>\n<p>If you are using a US layout then you're good no need to worry out this section if not read on:</p>\n<ul>\n<li>First list your options:</li>\n</ul>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      ls /usr/share/kbd/keymaps/**/*.map.gz\n    </textarea>\n    </code-fence>\n  \n<ul>\n<li>Now set the one you want, here's an example:</li>\n</ul>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      loadkeys de-latin1\n    </textarea>\n    </code-fence>\n  \n<h2>Verify boot mode</h2>\n<p>This command will verify that we will boot in UEFI mode</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      ls /sys/firmware/efi/efivars\n    </textarea>\n    </code-fence>\n  \n<p>IF the above directory doesn't exist you are either on old hardware or you have UEFI disabled</p>\n<h2>Internet connection</h2>\n<p>TODO add that junk for ethernet being doa</p>\n<p>I recommend installing over ethernet if your not then you can connect using <code class=\"language-text\">wifi-menu</code></p>\n<p>To confirm you're internet works:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      ping -5 archlinux.org\n    </textarea>\n    </code-fence>\n  \n<p>If your ethernet is not working then try the following:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      ip link # this will show you a number that looks something like  enp39s0\n    </textarea>\n    </code-fence>\n  \n<p>Use the number you found earlier to bring up your interface:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n       ip link set dev enp39s0 up\n    </textarea>\n    </code-fence>\n  \n<p>Then when it is up run Dhcp to pull an IP from the server:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n       dhcpcd enp39s0\n    </textarea>\n    </code-fence>\n  \n<p>Now try to ping again</p>\n<h2>Update System clock</h2>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      timedatectl set-ntp true\n    </textarea>\n    </code-fence>\n  \n<h2>Partition disks</h2>\n<p>Here is where you will most likely find the most trouble if you are not familiar with partitioning tools such as fdisk I would recommend you watch a video for this part since this really won't change much.</p>\n<p><strong>First list your disks</strong></p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      fdisk -l\n    </textarea>\n    </code-fence>\n  \n<p>You should see your disk in here mine is called /dev/sda (WARNING do not write to any of these disks unless you know it's the one you want to install Arch on)</p>\n<p><strong>Now choose the disk you wish to partition</strong></p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      fdisk /dev/sda\n    </textarea>\n    </code-fence>\n  \n<p>You should now be in the fdisk utility you can press <code class=\"language-text\">m</code> for help</p>\n<p>All of our partitions will be <strong>GPT</strong> partitions so you can press <code class=\"language-text\">g</code> when ready</p>\n<p>We will be create 3 partitions for the following:</p>\n<ul>\n<li>boot</li>\n<li>root</li>\n<li>home</li>\n</ul>\n<h3>Boot partition</h3>\n<ul>\n<li>Enter <code class=\"language-text\">n</code> (To create new partition)</li>\n<li>Enter <code class=\"language-text\">ENTER</code> (For the next available partition)</li>\n<li>Enter <code class=\"language-text\">ENTER</code> (To start the first available section)</li>\n<li>Enter <code class=\"language-text\">+512M</code> (This is the recommended size for our our boot partition)</li>\n<li>Enter <code class=\"language-text\">t</code> (To change the type of the partition to EFI)</li>\n<li>Enter <code class=\"language-text\">L</code> (To get a list of all partition types EFI should be 1)</li>\n<li>Press <code class=\"language-text\">q</code> (to escape the list)</li>\n<li>Enter <code class=\"language-text\">1</code> (To set the type of the partition we just made to EFI)</li>\n</ul>\n<h3>Root partition</h3>\n<ul>\n<li>Enter <code class=\"language-text\">n</code> (To create new partition)</li>\n<li>Enter <code class=\"language-text\">ENTER</code> (For the next available partition)</li>\n<li>Enter <code class=\"language-text\">ENTER</code> (To start the first available section)</li>\n<li>Enter <code class=\"language-text\">+15G</code> (You can increase this if you plan on installing a lot of programs 20G is usually more than enough)</li>\n<li>Enter <code class=\"language-text\">t</code> (To change the type of the partition to Linux Root (x86-64))</li>\n<li>Enter <code class=\"language-text\">2</code> (You will now need to specify which partition you are referring to since now there are two or more)</li>\n<li>Enter <code class=\"language-text\">L</code> (To get a list of all partition types Linux Root (x86-64) should be 24)</li>\n<li>Press <code class=\"language-text\">q</code> (to escape the list)</li>\n<li>Enter <code class=\"language-text\">24</code> (To set the type of the partition we just made to Linux Root (x86-64))</li>\n</ul>\n<h3>Home partition</h3>\n<ul>\n<li>Enter <code class=\"language-text\">n</code> (To create new partition)</li>\n<li>Enter <code class=\"language-text\">ENTER</code> (For the next available partition)</li>\n<li>Enter <code class=\"language-text\">ENTER</code> (To start the first available section)</li>\n<li>Enter <code class=\"language-text\">ENTER</code> (Just use the rest of the drive, I would even recommend putting this partition on a separate drive if you have a spare)</li>\n<li>Enter <code class=\"language-text\">t</code> (To change the type of the partition to Linux home)</li>\n<li>Enter <code class=\"language-text\">3</code> (You will now need to specify which partition you are referring to since now there are two or more)</li>\n<li>Enter <code class=\"language-text\">L</code> (To get a list of all partition types Linux home should be 28)</li>\n<li>Press <code class=\"language-text\">q</code> (to escape the list)</li>\n<li>Enter <code class=\"language-text\">28</code> (To set the type of the partition we just made to Linux home)</li>\n</ul>\n<h3>Write changes to disk</h3>\n<ul>\n<li>Enter <code class=\"language-text\">w</code></li>\n</ul>\n<p>Now you can run <code class=\"language-text\">fdisk -l</code> to see your newly created partitions</p>\n<h2>Format the partitions</h2>\n<p>We have to create 3 file systems here, so let's get started</p>\n<ul>\n<li>Format the EFI partition with:</li>\n</ul>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      mkfs.vfat /dev/sda1\n    </textarea>\n    </code-fence>\n  \n<ul>\n<li>Format the Root partition with:</li>\n</ul>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      mkfs.ext4 /dev/sda2\n    </textarea>\n    </code-fence>\n  \n<ul>\n<li>Format the Home partition with:</li>\n</ul>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      mkfs.ext4 /dev/sda3\n    </textarea>\n    </code-fence>\n  \n<h2>Mount the filesystems</h2>\n<p>You will need to mount sda1, sda2 and sda3, but you will need to mount Root first</p>\n<ul>\n<li>Mount sda2 (Root)</li>\n</ul>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      mount /dev/sda2 /mnt\n    </textarea>\n    </code-fence>\n  \n<ul>\n<li>Mount sda1 (Boot)</li>\n</ul>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      mkdir /mnt/boot\nmount /dev/sda1 /mnt/boot\n    </textarea>\n    </code-fence>\n  \n<ul>\n<li>Mount sda3 (Home)</li>\n</ul>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      mkdir /mnt/home\nmount /dev/sda3 /mnt/home\n    </textarea>\n    </code-fence>\n  \n<h3>Check mounts are correct</h3>\n<p>You can run <code class=\"language-text\">df</code> to make sure your mounts are in the right place</p>\n<h2>Install essential packages (and a few others)</h2>\n<p>Run the following:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      pacstrap /mnt base base-devel linux linux-firmware vim\n    </textarea>\n    </code-fence>\n  \n<p>If you have an intel processor also include <code class=\"language-text\">intel-ucode</code>, for AMD <code class=\"language-text\">amd-ucode</code></p>\n<h2>Configure the system</h2>\n<h3>Fstab</h3>\n<p>Generate UUIDs for newly created filesystem</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      genfstab -U /mnt >> /mnt/etc/fstab\n    </textarea>\n    </code-fence>\n  \n<p>You can check that it worked by printing the file:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      cat /mnt/etc/fstab\n    </textarea>\n    </code-fence>\n  \n<h3>Chroot</h3>\n<p>Now you can change root into the new system:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      arch-chroot /mnt\n    </textarea>\n    </code-fence>\n  \n<h2>Create a swap file</h2>\n<p>I'm going to use the varibale X to indicate what your swap size should be</p>\n<p>where X is RAM+sqrt(RAM)</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      fallocate -l XGB /swapfile\n\nchmod 600 /swapfile\n\nmkswap /swapfile\n\nswapon /swapfile\n    </textarea>\n    </code-fence>\n  \n<h2>Add swapfile to fstab</h2>\n<p>Add the following to fstab</p>\n<p>Open <code class=\"language-text\">/etc/fstab</code></p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      /swapfile none swap default 0 0\n    </textarea>\n    </code-fence>\n  \n<h3>Time zone</h3>\n<p>Set the time zone:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      ln -sf /usr/share/zoneinfo/Region/City /etc/localtime\n    </textarea>\n    </code-fence>\n  \n<p>Just search through /usr/share/zoneinfo until you find your nearest City</p>\n<p>Run <code class=\"language-text\">hwclock</code>:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      hwclock --systohc\n    </textarea>\n    </code-fence>\n  \n<h3>Localization</h3>\n<p>Uncommnent <code class=\"language-text\">en_US.UTF-8 UTF-8</code> and other needed locales in <code class=\"language-text\">/etc/locale.gen</code>, and generate them with:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      locale-gen\n    </textarea>\n    </code-fence>\n  \n<p>Create the <code class=\"language-text\">locale.conf</code> file, and set LANG variable</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      touch /etc/locale.conf\n\necho LANG=en_US.UTF-8 >> /etc/locale.conf\n    </textarea>\n    </code-fence>\n  \n<h2>Network configuration</h2>\n<p>Create <code class=\"language-text\">hostname</code> file:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      touch /etc/hostname\n\necho mycoolhostname >> /etc/hostname\n    </textarea>\n    </code-fence>\n  \n<p>Add matching entries to <code class=\"language-text\">hosts</code></p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      vim /etc/hosts\n\n127.0.0.1\t  localhost\n::1\t\t      localhost\n127.0.1.1\t  mycoolhostname.localdomain  mycoolhostname\n    </textarea>\n    </code-fence>\n  \n<h2>Root password</h2>\n<p>Change the root password:</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      passwd\n    </textarea>\n    </code-fence>\n  \n<h2>Installing more packages</h2>\n<p>Here we can install a few more packages for networking and things like man pages</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      pacman -S man-db man-pages texinfo inetutils netctl dhcpcd networkmanager wpa_supplicant dialog linux-headers network-manager-applet\n    </textarea>\n    </code-fence>\n  \n<h2>Boot loader</h2>\n<p>We'll be using grub because it has the biggest presence in the boot loader world</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      pacman -S grub efibootmgr os-prober mtools\n    </textarea>\n    </code-fence>\n  \n<p>Now let's install our boot loader</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB\n    </textarea>\n    </code-fence>\n  \n<p>Generate our config</p>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      grub-mkconfig -o /boot/grub/grub.cfg\n    </textarea>\n    </code-fence>\n  \n<h2>You're done</h2>\n<p>Enter <code class=\"language-text\">exit</code> then <code class=\"language-text\">reboot</code></p>\n<h2>Enable internet service</h2>\n<code-fence lang=\"null\" null>\n    <textarea vue-slot=\"code\">\n      systemctl start dhcpcd.service\n\nsystemctl enable dhcpcd.service\n    </textarea>\n    </code-fence>\n  \n<h2>Notes</h2>\n<ul>\n<li>arch boot mount to just /boot for windows</li>\n<li>I'll make a windows dual boot if there is interest</li>\n<li>If you dual boot with windows it is strongly recommended to disable Fast Startup</li>\n</ul>"}