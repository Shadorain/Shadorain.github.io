[{"layout":"default","author":"Shadorain","title":"Assembler","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"assembler\">Assembler</h1>\n","dir":"/blog/Assembly/","name":"index.md","path":"blog/Assembly/index.md","url":"/blog/Assembly/"},{"layout":"default","author":"Shadorain","title":"Dynamic Memory Allocation","nav_order":5,"permalink":"/blog/CLang/Dynamic-Memory-Allocation","parent":"CLang","grand_parent":"My Blog","has_children":true,"content":"<h1 class=\"no_toc\" id=\"dynamic-memory-allocation\">Dynamic Memory Allocation</h1>\n<h3 class=\"no_toc\" id=\"lets-take-a-look-at-malloc-calloc-realloc-and-free\">Lets take a look at: <em>malloc</em>, <em>calloc</em>, <em>realloc</em>, and <em>free</em></h3>\n\n<hr />\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ul id=\"markdown-toc\">\n <li><a href=\"#malloc--memory-allocation\" id=\"markdown-toc-malloc--memory-allocation\">Malloc :: Memory Allocation</a></li>\n <li><a href=\"#calloc--contiguous-allocation\" id=\"markdown-toc-calloc--contiguous-allocation\">Calloc :: Contiguous Allocation</a></li>\n <li><a href=\"#realloc--re-allocation\" id=\"markdown-toc-realloc--re-allocation\">Realloc :: Re-Allocation</a></li>\n <li><a href=\"#free\" id=\"markdown-toc-free\">Free</a></li>\n <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a> <ul>\n <li><a href=\"#simple-summary\" id=\"markdown-toc-simple-summary\">Simple Summary</a></li>\n </ul>\n </li>\n</ul>\n\n<hr />\n\n<h3 id=\"malloc--memory-allocation\">Malloc :: Memory Allocation</h3>\n<p><strong>Main point</strong>: In essence, allocates one large block of memory.</p>\n<ul>\n <li>dynamically allocates a single large block of memory with a specified size</li>\n <li>malloc -&gt; void*</li>\n <li>Returns a void pointer, castable into any type</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">int* ptr</code>: defines an int pointer that malloc will return to</li>\n <li><code class=\"language-plaintext highlighter-rouge\">(int*)</code>: type that malloc is being casted to (int ptr)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">100 * sizeof(int)</code>: byte size, <em>100 * 4 = 400B</em></li>\n</ul>\n\n<p>This example, allocates <em>400 bytes</em>, and the int* holds the address of the first byte.</p>\n<blockquote>\n <p>Insufficient space returns a <em>NULL</em> ptr.</p>\n</blockquote>\n\n<hr />\n\n<h3 id=\"calloc--contiguous-allocation\">Calloc :: Contiguous Allocation</h3>\n<p><strong>Main point</strong>: In essence, allocates multiple blocks of memory next to each other (like an array!)</p>\n<ul>\n <li>dynamically allocates a specific number of blocks of memory of specified type</li>\n <li>initializes each block with ‘0’</li>\n <li>calloc -&gt; void*</li>\n <li>Returns a void pointer, castable into any type</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax-1\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">calloc</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">));</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">float* ptr</code>: defines an int pointer that calloc will return to</li>\n <li><code class=\"language-plaintext highlighter-rouge\">(float*)</code>: type that calloc is being casted to (float ptr)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">15</code>: amount of blocks to create</li>\n <li><code class=\"language-plaintext highlighter-rouge\">sizeof(float)</code>: block size, a float is <em>4B</em>\n This example, allocates 15 blocks of memory each being 4B in size.\n <blockquote>\n <p>Insufficient space returns a <em>NULL</em> ptr.</p>\n </blockquote>\n </li>\n</ul>\n\n<hr />\n\n<h3 id=\"realloc--re-allocation\">Realloc :: Re-Allocation</h3>\n<p><strong>Main point</strong>: In essence, re-allocates what originally was allocated.</p>\n<ul>\n <li>dynamically change memory allocation of previously allocated memory</li>\n <li>re-initializes each block with ‘0’</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax-2\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">));</span>\n<span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">realloc</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"mi\">50</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">));</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">char* ptr = (char*) malloc(10 * sizeof(char));</code>: This allocates our block to change, char ptr <em>10B</em> in size</li>\n <li><code class=\"language-plaintext highlighter-rouge\">(char*)</code>: type that realloc is being casted to (char ptr)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ptr</code>: already allocated memory that we are changing</li>\n <li><code class=\"language-plaintext highlighter-rouge\">50 * sizeof(char)</code>: new block size, <em>50 * 1 = 50B</em>\n This example, re-allocates a char ptr that originally held <em>10B</em> into <em>50B</em>\n <blockquote>\n <p>Insufficient space returns a <em>NULL</em> ptr.</p>\n </blockquote>\n </li>\n</ul>\n\n<hr />\n\n<h3 id=\"free\">Free</h3>\n<p><strong>Main point</strong>: In essence, dynamically de-allocates memory.</p>\n<ul>\n <li>Good practice is to use this when done with allocated memory to save resources</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax-3\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">int* ptr = (int*) malloc(4 * sizeof(int));</code>: This allocates our block to free, int ptr <em>16B</em> in size</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ptr</code>: allocated memory to release\n This example, de-allocates the allocated memory of <em>ptr</em> the int<em>, giving up the memory address that *ptr</em> held and is set to <em>NULL</em></li>\n</ul>\n\n<hr />\n\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Hopefully, here I was able to show how important dynamic allocation is to your project that you are working on in the beautiful language of C. Most other languages automatically do all memory operations themselves and make it easy for the programmer, but having this level of control on each bit can both be a wonderful blessing or devastating curse.</p>\n\n<h4 id=\"simple-summary\">Simple Summary</h4>\n<dl>\n <dt>Malloc</dt>\n <dd>Allocates one large block of memory of a specified bitsize</dd>\n <dt>Calloc</dt>\n <dd>Allocates contiguos memory blocks of a specified bitsize (similar to an array)</dd>\n <dt>Realloc</dt>\n <dd>Re-allocates a block/s of memory that have previously been allocated</dd>\n <dt>Free</dt>\n <dd>Releases allocated memory back to the stack/heap cleaning up resources</dd>\n</dl>\n\n<hr />\n\n<h6 class=\"no_toc\" id=\"resources-used\">Resources Used</h6>\n<ul>\n <li><a href=\"https://en.cppreference.com/w/c/memory\">C Reference</a></li>\n <li><a href=\"https://www.geeksforgeeks.org/dynamic-memory-allocation-in-c-using-malloc-calloc-free-and-realloc/\">Geeks for Geeks</a></li>\n</ul>\n","dir":"/blog/CLang/","name":"dynam-mem-alloc.md","path":"blog/CLang/dynam-mem-alloc.md","url":"/blog/CLang/Dynamic-Memory-Allocation"},{"layout":"default","author":"Shadorain","title":"C Language","nav_order":5,"parent":"My Blog","has_children":false,"content":"<h1 class=\"no_toc text-delta\" id=\"c-language\">C Language</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#memory\" id=\"markdown-toc-memory\">Memory</a></li>\n</ol>\n\n<hr />\n\n<h2 id=\"memory\">Memory</h2>\n\n<ul>\n <li><a href=\"/blog/CLang/Dynamic-Memory-Allocation\">Dynamic Memory Allocation</a></li>\n</ul>\n","dir":"/blog/CLang/","name":"index.md","path":"blog/CLang/index.md","url":"/blog/CLang/"},{"layout":"default","author":"Shadorain","title":"Test","parent":"C Language","grand_parent":"My Blog","permalink":"/docs/blog/CLang/Test/","content":"# Test\n\n","dir":"/docs/blog/CLang/Test/","name":"test.md","path":"blog/CLang/test.md","url":"/docs/blog/CLang/Test/"},{"layout":"default","author":"Shadorain","title":"Emacs","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"emacs\">Emacs</h1>\n","dir":"/blog/Emacs/","name":"index.md","path":"blog/Emacs/index.md","url":"/blog/Emacs/"},{"layout":"default","author":"Shadorain","title":"Cat","nav_order":5,"permalink":"/blog/HackTheBox/Cat","parent":"HackTheBox","grand_parent":"My Blog","has_children":false,"content":"<h1 id=\"htb-challenge--mobile--cat\">HTB Challenge :: Mobile : Cat</h1>\n\n<p>So to start, lets read our small hint for this challenge: “Easy leaks”, nevermind\nthat isn’t helpful haha! Let’s just unzip the file we are given:\nOn Linux - <code class=\"language-plaintext highlighter-rouge\">unzip Cat.zip</code>. This extracts a file called <code class=\"language-plaintext highlighter-rouge\">cat.ab</code> onto our system.\nLet’s try running <code class=\"language-plaintext highlighter-rouge\">file</code> on it… <code class=\"language-plaintext highlighter-rouge\">cat.ab: Android Backup, version 5, Compressed,\nNot-Encrypted</code>. Usually file can only help us if the file has a specific header\n(with a magic number) that tells what type and info the file has. This file is an\nAndrois backup file! This may help us later in our research.</p>\n\n<h2 id=\"exploit\">Exploit</h2>\n\n<p>Why not try Googling then! Looked up how to extract an ab file and found a very\nhelpful <a href=\"https://stackoverflow.com/questions/18533567/how-to-extract-or-unpack-an-ab-file-android-backup-file\">stackoverflow link</a>\nscroll down a bit and there it is! The command to extract our Android backup file!</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">(</span> <span class=\"nb\">printf</span> <span class=\"s2\">\"</span><span class=\"se\">\\x</span><span class=\"s2\">1f</span><span class=\"se\">\\x</span><span class=\"s2\">8b</span><span class=\"se\">\\x</span><span class=\"s2\">08</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00\"</span> <span class=\"p\">;</span> <span class=\"nb\">tail</span> <span class=\"nt\">-c</span> +25 cat.ab <span class=\"o\">)</span> |  <span class=\"nb\">tar </span>xfvz -\n</code></pre></div></div>\n\n<p>Running this on our file, it ends in an error (a comment in stack tells how to\nget past the error), but that doesn’t matter since we’ve already extracted enough.\nExtracting was verbose so you should see that it generated some directories,\nimmediately <code class=\"language-plaintext highlighter-rouge\">shared/0/Pictures/</code> caught my eye! There were some pictures in there\nwhy not just check them out! Looking through each picture it seems as if they are\nseemingly normal (just cat pictures) but then I found it! Checkout <code class=\"language-plaintext highlighter-rouge\">IMAG0004.jpg</code>!\nA good tool on linux that I absolutely adore is called <code class=\"language-plaintext highlighter-rouge\">sxiv</code> created by the\nwonderful Suckless Developers, and sxiv lets you zoom in as far as you want, and\nlooking closely at the paper the mystery man was holding, it said Top Secret as the\ntitle (already suspicious) and at the bottom we see our flag!!! We did it! Solved\nthis simple mobile challenge.</p>\n\n<p>Pop the flag into the box and get those swell twenty points baby!</p>\n","dir":"/blog/HackTheBox/","name":"cat.md","path":"blog/HackTheBox/Challenges/cat.md","url":"/blog/HackTheBox/Cat"},{"layout":"default","author":"Shadorain","title":"Hack the Box","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 class=\"no_toc\" id=\"hack-the-box\">Hack the Box</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#challenges\" id=\"markdown-toc-challenges\">Challenges</a></li>\n <li><a href=\"#machines\" id=\"markdown-toc-machines\">Machines</a></li>\n</ol>\n\n<h3 id=\"challenges\">Challenges</h3>\n\n<ul>\n <li><a href=\"/blog/HackTheBox/Cat\">Cat</a></li>\n</ul>\n\n<h3 id=\"machines\">Machines</h3>\n","dir":"/blog/HackTheBox/","name":"index.md","path":"blog/HackTheBox/index.md","url":"/blog/HackTheBox/"},{"layout":"default","author":"Shadorain","title":"Haskell","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"haskell\">Haskell</h1>\n","dir":"/blog/Haskell/","name":"index.md","path":"blog/Haskell/index.md","url":"/blog/Haskell/"},{"layout":"default","author":"Shadorain","title":"LaTeX","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"latex\">LaTeX</h1>\n","dir":"/blog/Latex/","name":"index.md","path":"blog/Latex/index.md","url":"/blog/Latex/"},{"layout":"default","author":"Shadorain","title":"Hardening Linux","nav_order":0,"permalink":"/blog/Linux/Hardening-Linux","parent":"Linux","grand_parent":"My Blog","has_children":false,"content":"<h1 class=\"no_toc\" id=\"hardening-linux\">Hardening Linux</h1>\n<h5 class=\"no_toc\" id=\"in-this-post-we-take-a-look-at\">In this post we take a look at:</h5>\n\n<dl class=\"no_toc\">\n <dt>Userspace</dt>\n <dd><a href=\"#apparmor\">AppArmor</a></dd>\n <dd><a href=\"#firejail\">FireJail</a></dd>\n <dd><a href=\"#rkhunter\">RKHunter</a></dd>\n <dt>Kernel</dt>\n <dd><a href=\"#patches\">Custom Security Patches</a></dd>\n <dt>Network</dt>\n <dd><a href=\"#firewall\">Firewall and new DNS</a></dd>\n</dl>\n\n<hr />\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ul id=\"markdown-toc\">\n <li><a href=\"#userspace\" id=\"markdown-toc-userspace\">Userspace</a></li>\n <li><a href=\"#network\" id=\"markdown-toc-network\">Network</a></li>\n <li><a href=\"#kernel\" id=\"markdown-toc-kernel\">Kernel</a></li>\n</ul>\n\n<hr />\n\n<h3 id=\"userspace\">Userspace</h3>\n<p><strong>The userspace is where all our typical applications will run on our machine, so we definitely need to implement security here.</strong>\nThere are two FOSS (Free and Open Source) pieces of software that I believe are at the top of the list past SELinux for what we need:</p>\n<ul>\n <li>AppArmor</li>\n <li>FireJail\n<pre><code class=\"language-note\">To install these, check in your repo what their package names are. On XBPS (Void Linux) they are simply `apparmor` and `firejail`.\n</code></pre>\n </li>\n</ul>\n\n<h4 class=\"no_toc\" id=\"apparmor\">Apparmor</h4>\n<p>AppArmor is quite self explanatory to set up quite frankly, and honestly the defaults are all you need for a desktop system.\nLet’s first check if it is enabled:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>aa-enabled\nYes\n</code></pre></div></div>\n\n<blockquote>\n <p>If you get an error here then good that just means we have to set it up. If you get Yes, then you can skip this section.</p>\n</blockquote>\n\n<p>First, we have to send some commands to our kernel, the simplest way to do this is via GRUB, if you use a different bootloader skip to <a href=\"#different-bootloader\">Different Bootloader</a>.</p>\n\n<h6 class=\"no_toc\" id=\"grub\">GRUB</h6>\n<pre><code class=\"language-tip\">Use your editor of choice, I prefer and recommend Neovim which is aliased to `vim` on my system, which I will use throughout all blogposts.\n</code></pre>\n<p>To edit our grub kernel commandline, we must go into <code class=\"language-plaintext highlighter-rouge\">/etc/default/grub</code></p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>vim /etc/default/grub\n</code></pre></div></div>\n\n<p>Find, the line with <code class=\"language-plaintext highlighter-rouge\">GRUB_CMDLINE_LINUX_DEFAULT</code> and at the end we need to add two parameters, <code class=\"language-plaintext highlighter-rouge\">apparmor=1</code> and <code class=\"language-plaintext highlighter-rouge\">security=apparmor</code>.</p>\n\n<p>Here is how my <code class=\"language-plaintext highlighter-rouge\">/etc/default/grub</code> file looks. Take note of the last two parameters of <code class=\"language-plaintext highlighter-rouge\">GRUB_CMDLINE_LINUX_DEFAULT</code>.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#</span>\n<span class=\"c\"># Configuration file for GRUB.</span>\n<span class=\"c\">#</span>\n<span class=\"nv\">GRUB_DEFAULT</span><span class=\"o\">=</span>0\n<span class=\"c\">#GRUB_HIDDEN_TIMEOUT=0</span>\n<span class=\"c\">#GRUB_HIDDEN_TIMEOUT_QUIET=false</span>\n<span class=\"nv\">GRUB_TIMEOUT</span><span class=\"o\">=</span>5\n<span class=\"nv\">GRUB_DISTRIBUTOR</span><span class=\"o\">=</span><span class=\"s2\">\"Void\"</span>\n<span class=\"nv\">GRUB_CMDLINE_LINUX_DEFAULT</span><span class=\"o\">=</span><span class=\"s2\">\"loglevel=4 slub_debug=P page_poison=1 net.ifnames=0 apparmor=1 security=apparmor\"</span>\n<span class=\"c\"># Uncomment to use basic console</span>\n<span class=\"c\">#GRUB_TERMINAL_INPUT=\"console\"</span>\n<span class=\"c\"># Uncomment to disable graphical terminal</span>\n<span class=\"c\">#GRUB_TERMINAL_OUTPUT=console</span>\n<span class=\"c\">#GRUB_BACKGROUND=/usr/share/void-artwork/splash.png</span>\n<span class=\"c\">#GRUB_GFXMODE=1920x1080x32</span>\n<span class=\"c\">#GRUB_DISABLE_LINUX_UUID=true</span>\n<span class=\"c\">#GRUB_DISABLE_RECOVERY=true</span>\n<span class=\"c\"># Uncomment and set to the desired menu colors.  Used by normal and wallpaper</span>\n<span class=\"c\"># modes only.  Entries specified as foreground/background.</span>\n<span class=\"c\">#GRUB_COLOR_NORMAL=\"light-blue/black\"</span>\n<span class=\"c\">#GRUB_COLOR_HIGHLIGHT=\"light-cyan/blue\"</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>update-grub\n❱ <span class=\"nb\">sudo </span>shutdown <span class=\"nt\">-r</span> now\n</code></pre></div></div>\n<p>This will enable the AppArmor module in the kernel from the GRUB bootloader commandline.</p>\n\n<h6 class=\"no_toc\" id=\"different-bootloader\">Different Bootloader</h6>\n<p>There are quite a large number of bootloader’s out there so I will only cover grub here in how to do it, but the options are the same.</p>\n\n<p>Here is a <a href=\"https://wiki.archlinux.org/index.php/Kernel_parameters\">link</a> on how to send commands to the kernel from different bootloaders. The commands required for AppArmor to run and function are: <code class=\"language-plaintext highlighter-rouge\">apparmor=1</code> and <code class=\"language-plaintext highlighter-rouge\">security=apparmor</code></p>\n\n<h5 class=\"no_toc\" id=\"enable-and-enforce\">Enable and Enforce</h5>\n<p>Now that we have allowed AppArmor from the kernel, its time to Enable and Enforce!</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>aa-enforce /etc/apparmor.d/<span class=\"k\">*</span>\n</code></pre></div></div>\n<p>This command employs all the default AppArmor settings that are set in <code class=\"language-plaintext highlighter-rouge\">/etc/apparmor.d/</code>.</p>\n\n<blockquote>\n <p>This is an important directory to keep in mind because if there is not a default configuration file for a specific application,\nthen you will need to make your own to begin enforcement of any policies on that specific application.</p>\n</blockquote>\n\n<p>Finally, it is time to set AppArmor to enforce policies.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>vim /etc/default/apparmor\n</code></pre></div></div>\n<p>Edit the file to look like this: (note you do not need the comments, just the final line)</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># AppArmor configuration</span>\n\n<span class=\"c\"># Possible options:</span>\n<span class=\"c\"># - disable</span>\n<span class=\"c\"># - complain</span>\n<span class=\"c\"># - enforce</span>\n<span class=\"nv\">APPARMOR</span><span class=\"o\">=</span>enforce\n</code></pre></div></div>\n<p>Save and exit (<code class=\"language-plaintext highlighter-rouge\">ESC :wq</code>)</p>\n\n<h5 class=\"no_toc\" id=\"finish-up\">Finish up</h5>\n<p>Finally all you have to do is first, reboot your system.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>shutdown <span class=\"nt\">-r</span> now\n</code></pre></div></div>\n<p>During the bootup process watch closely before it displays the login tty or display manager.\nIf setup correctly, there should have been some apparmor messages.</p>\n\n<p>But this isn’t a reliable way of checking, here are two ways (advice using both) to check if it is running and enforcing policies:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">❱ sudo aa-enabled</code> If this displays <code class=\"language-plaintext highlighter-rouge\">Yes</code> then it is active, but this isn’t enough…</li>\n <li><code class=\"language-plaintext highlighter-rouge\">❱ sudo apparmor_status | less</code> If this displays a whole list of programs then you are all set!</li>\n</ul>\n\n<p>Congratulations, you now have AppArmor installed into your kernel and enforcing security policies on your system. Not so hard after all! There is definitely a lot more too it though so be sure to go through <code class=\"language-plaintext highlighter-rouge\">/etc/apparmor.d/</code> and add your own application configs.</p>\n\n<h4 class=\"no_toc\" id=\"firejail\">FireJail</h4>\n<p><em>Firejail</em> is a program that essentially <strong>sandboxes</strong> any program that is run with it which means that the program can only access directly what it needs and nothing else. This is an effective security measure because if an attacker for example is able to exploit your web browser or a page, they cannot go very far because the browser itself is locked to only it’s needed files.</p>\n\n<p><em>FireJail</em> is simple to start using, but there is a lot more to it past what this post will cover. First, install it from your repo (<a href=\"#userspace\">see above</a>).</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ firejail <span class=\"nt\">--seccomp</span> <span class=\"nt\">--nonewprivs</span> <span class=\"nt\">--private-tmp</span> &lt;program&gt;\n</code></pre></div></div>\n<p>This honestly is the only command I use and it has done a good job so far. In my window manager (xmonad) I have this line prepended in every keybind that opens any program, including my terminal, browser, dmenu, everything.</p>\n\n<p>I yet have noticed any performance issues, everything has run smooth and without errors. The only programs I believe this could cause malfunction would be those that dynamically call to different libraries or similar. Give this one a good tryout though, definitely think it to be quite helpful in adding another layer of security.</p>\n\n<h4 class=\"no_toc\" id=\"rkhunter\">RKHunter</h4>\n<p><em>RKHunter</em> stands for RootKit Hunter, and this is an incredible tool that looks for any signs of rootkit infections on your system.</p>\n<pre><code class=\"language-danger\">A RootKit is a form of malware that gives an attacker continued escalated priviledge access to a computer. These are extremely dangerous and can give the attacker access to everything.\n</code></pre>\n<p>Install this from your repo, the package name should simply be <code class=\"language-plaintext highlighter-rouge\">rkhunter</code>, if not, try <code class=\"language-plaintext highlighter-rouge\">rootkit-hunter</code>.\nFirst, before anything else, make sure to update our rkhunter <em>properties database</em>.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ rkhunter <span class=\"nt\">--propupd</span>\n</code></pre></div></div>\n<p>Now we can run the check on our system.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ rkhunter <span class=\"nt\">--check</span>\n</code></pre></div></div>\n<p>This will wait for user interaction every few lines to make sure that nothing is missed from it. Be sure to watch the right line for any “Warning” or “Dangerous” signs.</p>\n\n<p>Once the check is complete, if there were any suspicious binaries we can look in the log file to see more information:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo cat</span> /var/log/rkhunter.log | less\n</code></pre></div></div>\n\n<p>Lastly, to quelch any false Warnings (egrep, fgrep, ldd, and some others) simply set them to be whitelisted in our rkhunter config:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>vim /etc/rkhunter.conf\n</code></pre></div></div>\n<p>Add these lines to whitelist:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">SCRIPTWHITELIST</span><span class=\"o\">=</span>/usr/bin/egrep\n<span class=\"nv\">SCRIPTWHITELIST</span><span class=\"o\">=</span>/usr/bin/fgrep\n<span class=\"nv\">SCRIPTWHITELIST</span><span class=\"o\">=</span>/usr/bin/ldd\n</code></pre></div></div>\n<p>These are false positives because after the base system has been installed, these binaries are swapped with scripts which sengs a flag to rkhunter, but these are not malicious, unless…</p>\n\n<p><em>RKHunter</em> is a simple and very powerful tool to keep a watchful eye on various system binaries. Be sure to use it after installing anything that just didn’t seem fully trust worthy.</p>\n\n<h3 id=\"network\">Network</h3>\n<h4 class=\"no_toc\" id=\"reconfigure-dns\">Reconfigure DNS</h4>\n<p>I personally trust Cloudflare to set my DNS to the most. They run <code class=\"language-plaintext highlighter-rouge\">nginx</code> for their server which is under a <em>BSD</em> Liscence, and they promote Free Software alot. On top of this though, their network practically acts like a large VPN, and come with some nice security protocols as well, some being a Firewall and DDOS protection.</p>\n\n<p>Let’s set it here:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>vim /etc/resolv.conf\n</code></pre></div></div>\n\n<p>Depening, your file should be pretty minimal, edit <code class=\"language-plaintext highlighter-rouge\">nameserver &lt;ip&gt;</code> to <code class=\"language-plaintext highlighter-rouge\">nameserver 1.1.1.1</code> (Cloudflares IP).\nYour file should look similar to:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>search fios-router.home\nnameserver 1.1.1.1\n</code></pre></div></div>\n\n<pre><code class=\"language-warning\">If you use NetworkManager, you will need to configure it to not reconfigure your 'resolv.conf' on reboot. To do this, add the line `dns=none` under [main] in /etc/NetworkManager/NetworkManager.conf\n</code></pre>\n\n<h4 class=\"no_toc\" id=\"setup-ufw-firewall\">Setup UFW Firewall</h4>\n<p><code class=\"language-plaintext highlighter-rouge\">ufw</code> is an awesome tool. It stands for “uncomplicated firewall” because for real, it isn’t that complicated, but there is a load of great features and tools with it.</p>\n\n<p>Again, install it from your repo (<a href=\"#userspace\">see above</a>). And its time to turn off everything so be prepared to not have any connection!</p>\n\n<p>First, find what your network interface is, I set it to a variable here so that you can simply copy and paste the later commands:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ ip <span class=\"nb\">link</span>   <span class=\"c\"># If wireless, your card may look like i.e. `wlan0` or `wlp0s20f3` </span>\n            <span class=\"c\"># If ethernet, your card may look like i.e. `eth0` or `elp0s20f3`</span>\n❱ <span class=\"nv\">MY_INTERFACE</span><span class=\"o\">=</span>wlan0    <span class=\"c\"># put your interface instead of `wlan0`</span>\n</code></pre></div></div>\n\n<p>To enable <code class=\"language-plaintext highlighter-rouge\">ufw</code> run:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>ufw <span class=\"nb\">enable</span>\n</code></pre></div></div>\n\n<p>Here we disallow all traffic, nothing in nothing out:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>ufw default deny incoming\n❱ <span class=\"nb\">sudo </span>ufw default deny forwarding\n❱ <span class=\"nb\">sudo </span>ufw default deny outgoing\n</code></pre></div></div>\n\n<p>Next, we obviously don’t want to be completely locked away from the internet, so we set some openings:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>ufw allow out on <span class=\"nv\">$MY_INTERFACE</span> to 1.1.1.1 proto udp port 53 comment <span class=\"s1\">'Allows dns on interface'</span>\n❱ <span class=\"nb\">sudo </span>ufw allow out on <span class=\"nv\">$MY_INTERFACE</span> to any proto tcp port 80 comment <span class=\"s1\">'Allows HTTP on interface'</span>\n❱ <span class=\"nb\">sudo </span>ufw allow out on <span class=\"nv\">$MY_INTERFACE</span> to any proto tcp port 443 comment <span class=\"s1\">'Allows HTTPS on interface'</span>\n</code></pre></div></div>\n<ul>\n <li>We allow only traffic through our current DNS which is Cloudflare in this case (1.1.1.1) on port UDP:53.</li>\n <li>Then allow all HTTP and HTTPS traffic on TCP:80 and TCP:443.</li>\n <li>These only apply to our current interface as well, the others are still locked down.</li>\n <li>Should now be able to go to a webpage.</li>\n</ul>\n\n<p>Finally, we need to enable the <code class=\"language-plaintext highlighter-rouge\">ufw</code> service to start at startup:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># This command only works with the Runit Init System</span>\n❱ <span class=\"nb\">sudo ln</span> <span class=\"nt\">-s</span> /etc/sv/ufw /var/service   <span class=\"c\"># enables at startup</span>\n❱ <span class=\"nb\">sudo </span>sv up ufw    <span class=\"c\"># starts service now</span>\n</code></pre></div></div>\n\n<p>If you run <em>systemd</em> the command will be along the lines of:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable </span>ufw     <span class=\"c\"># enables at startup</span>\n❱ <span class=\"nb\">sudo </span>systemctl start ufw      <span class=\"c\"># starts service now</span>\n</code></pre></div></div>\n\n<p>There you have it, your <em>uncomplicated firewall</em> is now setup and enabled at startup. There are many more configuration options, but this is plenty enough for the casual desktop user.</p>\n\n<h3 id=\"kernel\">Kernel</h3>\n<p>Not yet done myself! Coming soon…</p>\n","dir":"/blog/Linux/","name":"hardening.md","path":"blog/Linux/hardening.md","url":"/blog/Linux/Hardening-Linux"},{"layout":"default","author":"Shadorain","title":"Linux","content":"<h1 class=\"no_toc text-delta\" id=\"linux\">Linux</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#securing-linux\" id=\"markdown-toc-securing-linux\">Securing Linux</a></li>\n</ol>\n\n<hr />\n\n<h2 id=\"securing-linux\">Securing Linux</h2>\n\n<ul>\n <li><a href=\"/blog/Linux/Hardening-Linux\">Hardening Linux</a></li>\n</ul>\n","dir":"/blog/Linux/","name":"index.md","path":"blog/Linux/index.md","url":"/blog/Linux/"},{"layout":"default","author":"Shadorain","title":"LAB1 : Beginners Luck","nav_order":1,"permalink":"/blog/Security/MemLabs/LAB1","parent":"MemLabs","grand_parent":"Security","has_children":false,"content":"<h1 class=\"no_toc\" id=\"memlabs-lab-1--beginners-luck\">MemLabs Lab 1 : Beginner’s Luck</h1>\n\n<p>This is the first Lab that we are totally on our own for in this series of challenges\nso lets get to it! Let’s first read our little prompt/hint:</p>\n\n<blockquote>\n <p>“My sister’s computer crashed. We were very fortunate to recover this memory dump.\nYour job is get all her important files from the system. From what we remember, we\nsuddenly saw a black window pop up with some thing being executed. When the crash\nhappened, she was trying to draw something. Thats all we remember from the time\nof crash.”</p>\n</blockquote>\n\n<p>Ok so it looks like, a command prompt opened right when the system crashed,\npotential malware? Wonder what that means that “she was trying to draw something”,\nbut this has to be a useful hint.</p>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#flag-1\" id=\"markdown-toc-flag-1\">Flag 1</a> <ol>\n <li><a href=\"#find-profile\" id=\"markdown-toc-find-profile\">Find Profile</a></li>\n <li><a href=\"#process-list\" id=\"markdown-toc-process-list\">Process List</a></li>\n <li><a href=\"#command-scan\" id=\"markdown-toc-command-scan\">Command Scan</a> <ol>\n <li><a href=\"#side-note\" id=\"markdown-toc-side-note\">Side Note</a></li>\n </ol>\n </li>\n <li><a href=\"#check-stdout\" id=\"markdown-toc-check-stdout\">Check stdout</a></li>\n <li><a href=\"#environment-variables\" id=\"markdown-toc-environment-variables\">Environment Variables</a></li>\n <li><a href=\"#hash-dump\" id=\"markdown-toc-hash-dump\">Hash dump</a></li>\n </ol>\n </li>\n <li><a href=\"#flag-2\" id=\"markdown-toc-flag-2\">Flag 2</a></li>\n <li><a href=\"#flag-3\" id=\"markdown-toc-flag-3\">Flag 3</a> <ol>\n <li><a href=\"#dump-files\" id=\"markdown-toc-dump-files\">Dump Files</a></li>\n <li><a href=\"#extracting\" id=\"markdown-toc-extracting\">Extracting</a></li>\n </ol>\n </li>\n <li><a href=\"#resources\" id=\"markdown-toc-resources\">Resources</a></li>\n</ol>\n\n<hr />\n\n<h2 id=\"flag-1\">Flag 1</h2>\n\n<h3 id=\"find-profile\">Find Profile</h3>\n\n<p>Lets first get the profile of this device from the memory dump, volatility is the\ntool we will be using for this Lab and all future ones. To do this run:\nNote - Don’t forget to extract the archive first…</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> MemoryDump_Lab1.raw imageinfo   <span class=\"c\"># we can also run kdgbscan as well</span>\n                                  <span class=\"c\"># instead of imageinfo but this enough for now</span>\n...\nSuggested Profile<span class=\"o\">(</span>s<span class=\"o\">)</span> : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000,\nWin2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418\nAS Layer1 : WindowsAMD64PagedMemory <span class=\"o\">(</span>Kernel AS<span class=\"o\">)</span>\n...\n</code></pre></div></div>\n\n<p>Looking for the profiles that volatility finds, we can test with different suggested\nones, but lets just use the first in our commands.</p>\n\n<h3 id=\"process-list\">Process List</h3>\n\n<p>Now that we have our profile, its time to see what processes are running on this\nmachine, the main ones I’m looking for are <code class=\"language-plaintext highlighter-rouge\">cmd.exe</code> (Windows Command Prompt),\n<code class=\"language-plaintext highlighter-rouge\">explorer.exe</code> (File Explorer) to see if there are any browser cache files,\nand something to do with drawing, not exactly sure what that will look like yet,\nmaybe <code class=\"language-plaintext highlighter-rouge\">paint.exe</code>? Lets start with using the famous and handy <code class=\"language-plaintext highlighter-rouge\">pslist</code> plugin in\nvolatility:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 pslist\n...\n0xfffffa8002046960 explorer.exe     604   2016   33   927   1   0 2019-12-11 14:32:25 UTC+0000\n0xfffffa8002222780 cmd.exe         1984    604    1    21   1   0 2019-12-11 14:34:54 UTC+0000\n0xfffffa80022bab30 mspaint.exe     2424    604    6   128   1   0 2019-12-11 14:35:14 UTC+0000\n0xfffffa8000f4c670 explorer.exe    2504   3000   34   825   2   0 2019-12-11 14:37:14 UTC+0000\n0xfffffa8001010b30 WinRAR.exe      1512   2504    6   207   2   0 2019-12-11 14:37:23 UTC+0000\n0xfffffa8001020b30 SearchProtocol  2868    480    8   279   0   0 2019-12-11 14:37:23 UTC+0000\n...\n</code></pre></div></div>\n\n<p>This is just a small list of the processes I found most suspicious. There may\nbe more though so we will look back again if we get stuck. For now, we see our\nsuspicious command prompt window (<code class=\"language-plaintext highlighter-rouge\">cmd.exe</code>) that popped up before crashing, and\nwe even found the mspaint (<code class=\"language-plaintext highlighter-rouge\">mspaint.exe</code>) instance as well that the sister was\nusing to draw on. Explorer here is also open in two instances so we will have\nto look into those as well. WinRar is open too and I don’t exactly know why\nunless it was for extracting malware but that doesnt seem realistic, we can\nlook into that later if we lose our trail with the other more obvious processes.</p>\n\n<h3 id=\"command-scan\">Command Scan</h3>\n\n<p>Next we should look at the different commands running on our <code class=\"language-plaintext highlighter-rouge\">cmd.exe</code> instance.\nTo do this lets run volatility with the <code class=\"language-plaintext highlighter-rouge\">cmdscan</code> plugin:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 cmdscan\n<span class=\"k\">**************************************************</span>\nCommandProcess: conhost.exe Pid: 2692\nCommandHistory: 0x1fe9c0 Application: cmd.exe Flags: Allocated, Reset\nCommandCount: 1 LastAdded: 0 LastDisplayed: 0\nFirstCommand: 0 CommandCountMax: 50\nProcessHandle: 0x60\nCmd <span class=\"c\">#0 @ 0x1de3c0: St4G3$1</span>\nCmd <span class=\"c\">#15 @ 0x1c0158:</span>\nCmd <span class=\"c\">#16 @ 0x1fdb30:</span>\n<span class=\"k\">**************************************************</span>\nCommandProcess: conhost.exe Pid: 2260\nCommandHistory: 0x38ea90 Application: DumpIt.exe Flags: Allocated\nCommandCount: 0 LastAdded: <span class=\"nt\">-1</span> LastDisplayed: <span class=\"nt\">-1</span>\nFirstCommand: 0 CommandCountMax: 50\nProcessHandle: 0x60\nCmd <span class=\"c\">#15 @ 0x350158: 8</span>\nCmd <span class=\"c\">#16 @ 0x38dc00: 8</span>\n</code></pre></div></div>\n\n<p>So, here there are two different command processes running, the second is just\nthe tool used to dump the memory for this challenge <code class=\"language-plaintext highlighter-rouge\">DumpIt.exe</code> so we care\nmore about the first one here. <code class=\"language-plaintext highlighter-rouge\">conhost.exe</code> which occured twice in <code class=\"language-plaintext highlighter-rouge\">pslist</code>\nactually but I didn’t list it because it didn’t seem suspicious started a command\nhere actually, but I’m not exactly sure yet what it is so we will come back to\nthis potentially later. For now lets take note of that strange command: <code class=\"language-plaintext highlighter-rouge\">St4G3$1</code></p>\n\n<h4 id=\"side-note\">Side Note</h4>\n\n<p>Just a little side note… I just realized what this means: <code class=\"language-plaintext highlighter-rouge\">St4G3$1</code>.\nLook a little closer, try replacing the numbers with letters… Yeah that was a hint\nand I totally missed it earlier, if you noticed it good job!</p>\n\n<blockquote>\n <p>St4G3$1 -&gt; Stage 1</p>\n</blockquote>\n\n<p>That was the hint to tell us we were close to finding stage 1 then! Either way we\nstill got it so lets find Stage 2!</p>\n\n<h3 id=\"check-stdout\">Check stdout</h3>\n\n<p>Next, I want to check stdout just incase our processes have been writing to it.\nTo do this we will use the <code class=\"language-plaintext highlighter-rouge\">consoles</code> plugin in volatility:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 consoles\n<span class=\"k\">**************************************************</span>\nConsoleProcess: conhost.exe Pid: 2692\nConsole: 0xff756200 CommandHistorySize: 50\nHistoryBufferCount: 1 HistoryBufferMax: 4\nOriginalTitle: %SystemRoot%<span class=\"se\">\\s</span>ystem32<span class=\"se\">\\c</span>md.exe\nTitle: C:<span class=\"se\">\\W</span>indows<span class=\"se\">\\s</span>ystem32<span class=\"se\">\\c</span>md.exe - St4G3<span class=\"nv\">$1</span>\nAttachedProcess: cmd.exe Pid: 1984 Handle: 0x60\n<span class=\"nt\">----</span>\nCommandHistory: 0x1fe9c0 Application: cmd.exe Flags: Allocated, Reset\nCommandCount: 1 LastAdded: 0 LastDisplayed: 0\nFirstCommand: 0 CommandCountMax: 50\nProcessHandle: 0x60\nCmd <span class=\"c\">#0 at 0x1de3c0: St4G3$1</span>\n<span class=\"nt\">----</span>\nScreen 0x1e0f70 X:80 Y:300\nDump:\nMicrosoft Windows <span class=\"o\">[</span>Version 6.1.7601]\nCopyright <span class=\"o\">(</span>c<span class=\"o\">)</span> 2009 Microsoft Corporation.  All rights reserved.\n\nC:<span class=\"se\">\\U</span>sers<span class=\"se\">\\S</span>martNet&gt;St4G3<span class=\"nv\">$1</span>\n<span class=\"nv\">ZmxhZ3t0aDFzXzFzX3RoM18xc3Rfc3Q0ZzMhIX0</span><span class=\"o\">=</span>\nPress any key to <span class=\"k\">continue</span> <span class=\"nb\">.</span> <span class=\"nb\">.</span> <span class=\"nb\">.</span>\n<span class=\"k\">**************************************************</span>\n</code></pre></div></div>\n\n<p>I cut out the DumpIt part of this output (in case you are wondering), but look-y\nhere! It looks like we have some useful output!! I wonder what that string is\nit looks like its base64 encoded: <code class=\"language-plaintext highlighter-rouge\">ZmxhZ3t0aDFzXzFzX3RoM18xc3Rfc3Q0ZzMhIX0=</code> so\nlet’s try decoding it:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">echo</span> <span class=\"s2\">\"ZmxhZ3t0aDFzXzFzX3RoM18xc3Rfc3Q0ZzMhIX0=\"</span> | <span class=\"nb\">base64</span> <span class=\"nt\">-d</span> -\nflag<span class=\"o\">{</span>th1s_1s_th3_1st_st4g3!!<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Well! It looks like we got our first flag! Be proud, I know it was simple but its\nalways nice to see those sweet flags, ya know!? Well, we aren’t finished yet silly\nwe have two more to figure out! Lets get to some more work!</p>\n\n<h3 id=\"environment-variables\">Environment Variables</h3>\n\n<p>Why not check if there are any useful or suspicious environment variables! Assuming\nthe sister doesn’t use computers much, there might be some made by the malicious\nactor in this scenario if there is one so lets take a look. To do this let’s utilize\nthe handy <code class=\"language-plaintext highlighter-rouge\">envars</code> plugin in volatility to get a nice list:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 envars\n</code></pre></div></div>\n\n<p>We may actually have to run this through a pager such as the common GNU <code class=\"language-plaintext highlighter-rouge\">less</code>\nutility or my favorite, <code class=\"language-plaintext highlighter-rouge\">bat</code>, to be able to digest this massive load of output,\nor we could possibly grep through it as well for special keywords such as certain\nprocesses or strings we’ve seen before.</p>\n\n<p>Doing this, we can see the sisters full name “Alissa Simpson” since it is her\n\\Users\\ account. Something suspicious though is the other user that comes up\neven more frequently which is “SmartNet-PC” but it looks like this is the user\nusing the DumpIt tool so I’m not sure if this is just a rabbit trail. There\nis though a logfile that repeatedly has shown up though that looks to be in a suspicious\ndirectory <code class=\"language-plaintext highlighter-rouge\">C:\\BVTBin\\Tests\\installpackage\\csilogfile.log</code>, wonder if we could get\nour hands on that. For now lets try a different approach though.</p>\n\n<h3 id=\"hash-dump\">Hash dump</h3>\n\n<p>Lets try getting a hash dump of the passwords on the system currently and try to\nbrute force them. To get the hashes lets use the <code class=\"language-plaintext highlighter-rouge\">hashdump</code> plugin in volatility:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 hasdump\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSmartNet:1001:aad3b435b51404eeaad3b435b51404ee:4943abb39473a6f32c11301f4987e7e0:::\nHomeGroupUser<span class=\"nv\">$:</span>1002:aad3b435b51404eeaad3b435b51404ee:f0fc3d257814e08fea06e63c5762ebd5:::\nAlissa Simpson:1003:aad3b435b51404eeaad3b435b51404ee:f4ff64c8baac57d22f22edc681055ba6:::\n</code></pre></div></div>\n\n<p>There are quite a few hashes here, I’m quite certain these are NTLM hashes which\nseems to be common on Windows so lets see first if an online hash search could\n“reverse” one of these for us.</p>\n\n<table>\n <tbody>\n <tr>\n <td>Administrator</td>\n <td> </td>\n </tr>\n <tr>\n <td>Guest</td>\n <td> </td>\n </tr>\n <tr>\n <td>SmartNet</td>\n <td>smartnet123</td>\n </tr>\n <tr>\n <td>HomeGroupUser</td>\n <td>NotFound</td>\n </tr>\n <tr>\n <td>Alissa Simpson</td>\n <td>goodmorningindia</td>\n </tr>\n </tbody>\n</table>\n\n<p>Well that’s saddening, I don’t think that any of these are too useful unless we were\nable to get onto the PC via a shell or physically. But that isn’t the scope of memory\nforensics so we have to find a different method!</p>\n\n<hr />\n\n<h2 id=\"flag-2\">Flag 2</h2>\n\n<p>So I ran into quite a ditch pretty fast when attempting different methods to find\nthe second flag. Went back to the hint, recalled that there was a crash that occurred\nso I went through all the different crash plugins but none of them supported our\nprofile that we were using so I dead ended there, tried almost every other plugin\nas well just trying and seeing if there was any useful or suspicious output, but\ngot nothing. Then I finally ran the <code class=\"language-plaintext highlighter-rouge\">memdump</code> plugin and crashed my entire blackarch\nVM… I ran out of all harddrive space and that caused some wacky issues. So I wanted\nto take a small break, but I just realized that I didnt take a look at all at the\nmemdump and that shoot maybe that could actually be useful, because it dumps the\ncurrent memory of each process (or a process u select which I didn’t know you could\ndo at first). Okay rant over, lets get to work.</p>\n\n<p>Remember how to get PID’s from the running processes? Yep <code class=\"language-plaintext highlighter-rouge\">pslist</code>/<code class=\"language-plaintext highlighter-rouge\">pstree</code>/etc (in\nvolatility) whichever one you want, just get the PID’s of the processes that looked\nuseful for us. Let’s start with <code class=\"language-plaintext highlighter-rouge\">mspaint.exe</code>: <code class=\"language-plaintext highlighter-rouge\">2424</code>. Be sure not to simply run\nthe <code class=\"language-plaintext highlighter-rouge\">memdump</code> plugin without checking your system free space, it fills up fast. This\ncommand will dump <code class=\"language-plaintext highlighter-rouge\">mspaint.exe</code> to our current directory into a <code class=\"language-plaintext highlighter-rouge\">.dmp</code> file:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># `-p` specifies PID, `-D` is dump directory</span>\n❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 memdump <span class=\"nt\">-p</span> 2424 <span class=\"nt\">-D</span> <span class=\"nb\">.</span>\n</code></pre></div></div>\n\n<p>This is when I found this <a href=\"https://w00tsec.blogspot.com/2015/02/extracting-raw-pictures-from-memory.html\">amazing resource</a>\nWhich gave the most brilliant ideas! Think about what we are trying to do… yep!\nView images essentially, right? So why aren’t we using a tool like GIMP to help us\nout to visualize our memory dump. Let’s do that! First we have to <code class=\"language-plaintext highlighter-rouge\">mv</code> (or Rename\non Win) our <code class=\"language-plaintext highlighter-rouge\">.dmp</code> file to a <code class=\"language-plaintext highlighter-rouge\">.data</code> or GIMP wont accept it. Next make sure you have\nGIMP installed and run <code class=\"language-plaintext highlighter-rouge\">gimp 2424.data</code> and it will open two windows, the one we\ncare about for now is the “Load Image from Raw Data” one. And right away switch\nthe “Image Type” to <code class=\"language-plaintext highlighter-rouge\">RGB Alpha</code> so that we can only see the useful data.</p>\n\n<p>Don’t hit <code class=\"language-plaintext highlighter-rouge\">Open</code> yet, we want to find our hidden text first in this dump then we\ncan do the rest of what we need. So as this link suggests, because mspaint stores\nits images as BMPs, it most likely will be flipped and upside-down, so that is a\nstart. The issue is we don’t exactly know what we are looking for yet, maybe text?\nLets start moving around the three main values there, width and height first, then\noffset (try to avoid the sliders because they increment too fast and will cause\nGIMP to crash).</p>\n\n<p>So for the height, I kept it at around 600-700 just to fill the small window we are\ngiven as a preview, we hardly need to scroll but if you would want to vertically\nscroll through the memory be sure to set that much higher. The width and offset are\nwhere it gets confusing. So honestly I’ve never done this before so I honestly found\nit fascinating just to hold the up arrow in the width box and I noticed a white line\nthat stretched accross the screen, but as I kept holding the line would fade and\na new larger one would show and have like data in it and it eventually became clear\nthat that was written text and at about width of <code class=\"language-plaintext highlighter-rouge\">4305px</code> (assuming it is in pixels),</p>\n\n<blockquote>\n <p>Note: At <code class=\"language-plaintext highlighter-rouge\">3690px</code> the text is pretty visible here as well, but not enough for reading\nclearly, so I kept holding the up arrow till the second time it got clearer.</p>\n</blockquote>\n\n<p>I finally found what took me hours to find! Some text that looks like complete\ngiberish, but wait! I grabbed my laptop and flipped it over and there it was our\npretty little flag. If we want too we can use offset to make it more seemingly clear\natleast from my experiments but I’m not exactly sure what it does. Lets hit okay\nnow!</p>\n\n<p>In gimp with our image now prepared, lets use some quick tools to make this easy\nfor us. The first is in <code class=\"language-plaintext highlighter-rouge\">Tools -&gt; Transformation Tools -&gt; Rotate</code> or hit <code class=\"language-plaintext highlighter-rouge\">Shift+R</code>.\nLet’s rotate our image 180 degrees. And second, <code class=\"language-plaintext highlighter-rouge\">Tools -&gt; Transformation Tools -&gt;\nFlip</code> or <code class=\"language-plaintext highlighter-rouge\">Shift+F</code>. With this tool selected just click on the image in the viewer\nand that should flip it on the y-axis… and lookey here! Is that not our flag!</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>flag{G00d_BoY_good_girL}\n</code></pre></div></div>\n\n<p>Well done we have gotten the second flag… wow this is only an “Easy” rated\nchallenge too, memory forensics is so cool!</p>\n\n<hr />\n\n<h2 id=\"flag-3\">Flag 3</h2>\n\n<p>This might be a wild goose chase but the process I’m most suspicious of is\nWinRar. So I’m going to point my attention to that for the time being to maybe\nsee if that is what flag 3 is hiding in somewhere. Let’s start with a <code class=\"language-plaintext highlighter-rouge\">pstree</code>\nagain to see what initiates WinRAR:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 pstree\n 0xfffffa8000f4c670:explorer.exe                     2504   3000     34    825 2019-12-11 14:37:14 UTC+0000\n<span class=\"nb\">.</span> 0xfffffa8000f9a4e0:VBoxTray.exe                    2304   2504     14    144 2019-12-11 14:37:14 UTC+0000\n<span class=\"nb\">.</span> 0xfffffa8001010b30:WinRAR.exe                      1512   2504      6    207 2019-12-11 14:37:23 UTC+0000\n...\n</code></pre></div></div>\n\n<p>Okay, of course it’s <code class=\"language-plaintext highlighter-rouge\">explorer.exe</code> that is running it WinRAR, we aren’t doing\nLinux forensics! Something we haven’t run yet is the <code class=\"language-plaintext highlighter-rouge\">cmdline</code> command to see what\ncommands are being run and their arguments, I believe that commands are run in the\nbackground even if its a GUI application. So lets see if there are any commands being\nrun by WinRAR or File Explorer:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 cmdline\n...\nWinRAR.exe pid:   1512\nCommand line : <span class=\"s2\">\"C:</span><span class=\"se\">\\P</span><span class=\"s2\">rogram Files</span><span class=\"se\">\\W</span><span class=\"s2\">inRAR</span><span class=\"se\">\\W</span><span class=\"s2\">inRAR.exe\"</span> <span class=\"s2\">\"C:</span><span class=\"se\">\\U</span><span class=\"s2\">sers</span><span class=\"se\">\\A</span><span class=\"s2\">lissa Simpson</span><span class=\"se\">\\D</span><span class=\"s2\">ocuments</span><span class=\"se\">\\I</span><span class=\"s2\">mportant.rar\"</span>\n...\n</code></pre></div></div>\n\n<p>BINGO! Knew WinRAR was something we should look at!! Sweet so now we see that this\n<code class=\"language-plaintext highlighter-rouge\">Important.rar</code> archive is something we need to take a look at. I wonder how we\nshould go about this to find the data that was compressed inside, maybe we can get\na dump of that archive somehow? Thats the plan! Just found out that there is a command\ncalled <code class=\"language-plaintext highlighter-rouge\">dumpfiles</code> that we can point to an offset so lets find where in the memory\nthis file is, to do this lets use the <code class=\"language-plaintext highlighter-rouge\">filescan</code> utility and grep for <code class=\"language-plaintext highlighter-rouge\">Important.rar</code>:</p>\n\n<h3 id=\"dump-files\">Dump Files</h3>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 filescan | <span class=\"nb\">grep</span> <span class=\"nt\">-i</span> <span class=\"s2\">\"Important.rar\"</span>\n0x000000003fa3ebc0      1      0 R--r-- <span class=\"se\">\\D</span>evice<span class=\"se\">\\H</span>arddiskVolume2<span class=\"se\">\\U</span>sers<span class=\"se\">\\A</span>lissa Simpson<span class=\"se\">\\D</span>ocuments<span class=\"se\">\\I</span>mportant.rar\n0x000000003fac3bc0      1      0 R--r-- <span class=\"se\">\\D</span>evice<span class=\"se\">\\H</span>arddiskVolume2<span class=\"se\">\\U</span>sers<span class=\"se\">\\A</span>lissa Simpson<span class=\"se\">\\D</span>ocuments<span class=\"se\">\\I</span>mportant.rar\n0x000000003fb48bc0      1      0 R--r-- <span class=\"se\">\\D</span>evice<span class=\"se\">\\H</span>arddiskVolume2<span class=\"se\">\\U</span>sers<span class=\"se\">\\A</span>lissa Simpson<span class=\"se\">\\D</span>ocuments<span class=\"se\">\\I</span>mportant.rar\n</code></pre></div></div>\n\n<p>Well, not exactly sure why it matched three times the same exact file, but this\nwas the output. So there is our offset: <code class=\"language-plaintext highlighter-rouge\">0x000000003fb48bc0</code>, lets use the\n<code class=\"language-plaintext highlighter-rouge\">dumpfiles</code> command with our offset to see what is in this archive!</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 dumpfiles <span class=\"nt\">-O</span> 0x000000003fb48bc0 <span class=\"nt\">-D</span> <span class=\"nb\">.</span>\nDataSectionObject 0x3fb48bc0   None   <span class=\"se\">\\D</span>evice<span class=\"se\">\\H</span>arddiskVolume2<span class=\"se\">\\U</span>sers<span class=\"se\">\\A</span>lissa Simpson<span class=\"se\">\\D</span>ocuments<span class=\"se\">\\I</span>mportant.rar\n</code></pre></div></div>\n\n<p>Cool we have the file on our own system now in our current working directory… one\ncatch though: the file we just got is NOT a rar archive. Lets first look at the first\nfew bits of this file using <code class=\"language-plaintext highlighter-rouge\">xxd</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ xxd <span class=\"nt\">-l</span> 256 test.dat\n00000000: 5261 7221 1a07 0100 06f7 f70b 0b01 0507  Rar!............\n00000010: 0006 0101 c5c8 8200 6875 feed 1303 02c0  ........hu......\n00000020: 0004 c000 0062 9947 fe80 0000 0343 4d54  .....b.G.....CMT\n00000030: 5061 7373 776f 7264 2069 7320 4e54 4c4d  Password is NTLM\n00000040: 2068 6173 6828 696e 2075 7070 6572 6361   <span class=\"nb\">hash</span><span class=\"o\">(</span><span class=\"k\">in </span>upperca\n00000050: 7365 2920 6f66 2041 6c69 7373 6127 7320  se<span class=\"o\">)</span> of Alissa<span class=\"s1\">'s\n00000060: 6163 636f 756e 7420 7061 7373 7764 2e00  account passwd..\n00000070: d9da 17ab 5802 033c 80c7 0204 dde7 0220  ....X..&lt;.......\n00000080: cd37 7c99 8003 0009 666c 6167 332e 706e  .7|.....flag3.pn\n00000090: 6730 0100 030f 6ea9 4771 4d53 547d 380d  g0....n.GqMST}8.\n000000a0: b206 6cd3 e705 fd3e 6972 4a69 fd48 c56d  ..l....&gt;irJi.H.m\n000000b0: fb70 ded8 b735 2ff7 cb5a 4dd0 2f3f ee83  .p...5/..ZM./?..\n000000c0: 0cb0 0a03 02af 48a0 c727 b0d5 0177 13f1  ......H..'</span>...w..\n000000d0: 5921 12f6 2dac eec0 b40c 79df 15e2 e009  Y!..-.....y.....\n000000e0: fc14 4831 0bd6 4f6e 4f0f 4e61 4a28 754c  ..H1..OnO.NaJ<span class=\"o\">(</span>uL\n000000f0: 19f6 ab39 7359 7140 212e cd36 87da 8610  ...9sYq@!..6....\n</code></pre></div></div>\n\n<p>Well would you look at that! We figured out the password for the archive we\nare trying to get into (refer to <a href=\"#hash-dump\">Hash Dumps</a>) but we have to\nbe able to convert this data into a RAR file (shown in the first four bytes:)\nto then extract the encrypted rar and get that png we see (<code class=\"language-plaintext highlighter-rouge\">flag3.png</code>)</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">❱</span> <span class=\"n\">python2</span><span class=\"p\">.</span><span class=\"mi\">7</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s\">\"52617221\"</span><span class=\"p\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s\">\"hex\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"k\">print</span> <span class=\"n\">a</span>\n<span class=\"n\">Rar</span><span class=\"err\">!</span>\n</code></pre></div></div>\n\n<h3 id=\"extracting\">Extracting</h3>\n\n<p>Welp, I went ahead of myself and realized I messed up slightly. The file we\nretrieved did actually have a RAR header and I noticed that but it totally\nwent over my head! The first four bytes of a RAR file always is <code class=\"language-plaintext highlighter-rouge\">5261 7221</code>\n-&gt; <code class=\"language-plaintext highlighter-rouge\">Rar!</code> and I showed that above, and rechecked this by creating my own rar,\nbut never took it to mind! We don’t even have to do any bit changing, we literally\ncan just run:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ unrar x test.dat\nExtracting from test.dat\nPassword is NTLM <span class=\"nb\">hash</span><span class=\"o\">(</span><span class=\"k\">in </span>uppercase<span class=\"o\">)</span> of Alissa<span class=\"s1\">'s account passwd.\nEnter password (will not be echoed) for flag3.png:\n</span></code></pre></div></div>\n\n<p>Let’s get that hash from above (<a href=\"#hash-dumps\">Hash Dumps</a>): <code class=\"language-plaintext highlighter-rouge\">F4FF64C8BAAC57D22F22EDC681055BA6</code>\nLets convert it to all uppercase.</p>\n\n<blockquote>\n <p><strong>Tip</strong>: if you use vim/nvim like me, try highlighting the hash with visual select\nmode (<code class=\"language-plaintext highlighter-rouge\">v</code>) then press <code class=\"language-plaintext highlighter-rouge\">U</code>, it will uppercase the selected area.</p>\n</blockquote>\n\n<p>If this doesn’t work we can try the cracked hash which is <code class=\"language-plaintext highlighter-rouge\">goodmorningindia</code>.\nGreat the hash worked just like it was supposed to! And our image is now extracted!\nView it and… there you go, flag three is finally complete! We did it! Our first\nfull memory forensics challenge on our own! That was super fun, super excited to\ncontinue on the next and most likely much more challenging labs!</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>flag{w3ll_3rd_stage_was_easy}\n</code></pre></div></div>\n\n<hr />\n\n<p>Hope you enjoyed this blog, I had a lot of fun doing this challenge and writing\nthis post, stay tuned for more to come! Shado out.</p>\n\n<hr />\n\n<h2 id=\"resources\">Resources</h2>\n\n<ul>\n <li><a href=\"https://github.com/stuxnet999/MemLabs/tree/master/Lab%201\">MemLabs: Lab 1</a></li>\n <li><a href=\"https://github.com/volatilityfoundation/volatility/wiki/Command-Reference\">Volatility Command list</a></li>\n <li><a href=\"https://downloads.volatilityfoundation.org/releases/2.4/CheatSheet_v2.4.pdf\">Another Volatility Cheatsheet PDF</a></li>\n <li><a href=\"https://w00tsec.blogspot.com/2015/02/extracting-raw-pictures-from-memory.html\">Extracting Raw Images from Memory</a></li>\n <li><a href=\"https://whiteheart0.medium.com/retrieving-files-from-memory-dump-34d9fa573033\">Using XXD to Convert dat file to rar</a></li>\n</ul>\n","dir":"/blog/Security/MemLabs/","name":"MEM_Lab1.md","path":"blog/Security/MemLabs/MEM_Lab1.md","url":"/blog/Security/MemLabs/LAB1"},{"layout":"default","author":"Shadorain","title":"LAB2 : A New World","nav_order":2,"permalink":"/blog/Security/MemLabs/LAB2","parent":"MemLabs","grand_parent":"Security","has_children":false,"content":"<h1 class=\"no_toc\" id=\"memlabs-lab-2--a-new-world\">MemLabs Lab 2 : A New World</h1>\n\n<p>Lab 2 here we come! This is the second solo lab in this series (created by MemLabs),\nthat we are totally on our own for! This challenge has three flags we will have\nto find just like the last but I’m sure this will take a new approach than last\ntime (Why? Well just look at the challenge name). Why don’t we read through the\nprompt we are given for this challenge.</p>\n\n<blockquote>\n <p>“One of the clients of our company, lost the access to his system due to an unknown\nerror. He is supposedly a very popular “environmental” activist. As a part of\nthe investigation, he told us that his go to applications are browsers, his\npassword managers etc. We hope that you can dig into this memory dump and find\nhis important stuff and give it back to us.”</p>\n</blockquote>\n\n<p>Okay, so an error occured that caused his system to lose accessibility. We know this\nis most likely a Windows box, so maybe a command was run that caused this, we will\ncheck for that. Next sentence: “environmentalist” okay maybe there was some software\nhe was using for this, oh but then we see that he likes his browsers and password\nmanagers a lot, we can check browser cache, history, and saved passwords then! This\nwas a handy prompt, so let’s get to work.</p>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#flag-1\" id=\"markdown-toc-flag-1\">Flag 1</a> <ol>\n <li><a href=\"#find-profile\" id=\"markdown-toc-find-profile\">Find Profile</a></li>\n <li><a href=\"#process-list\" id=\"markdown-toc-process-list\">Process List</a></li>\n <li><a href=\"#command-scan\" id=\"markdown-toc-command-scan\">Command Scan</a></li>\n <li><a href=\"#check-stdout\" id=\"markdown-toc-check-stdout\">Check stdout</a></li>\n <li><a href=\"#environment-variables\" id=\"markdown-toc-environment-variables\">Environment Variables</a></li>\n </ol>\n </li>\n <li><a href=\"#flag-2\" id=\"markdown-toc-flag-2\">Flag 2</a> <ol>\n <li><a href=\"#hash-dump\" id=\"markdown-toc-hash-dump\">Hash dump</a></li>\n <li><a href=\"#memory-dump-notepad\" id=\"markdown-toc-memory-dump-notepad\">Memory Dump Notepad</a></li>\n <li><a href=\"#dump-files\" id=\"markdown-toc-dump-files\">Dump Files</a></li>\n </ol>\n </li>\n <li><a href=\"#flag-3\" id=\"markdown-toc-flag-3\">Flag 3</a> <ol>\n <li><a href=\"#chrome-history\" id=\"markdown-toc-chrome-history\">Chrome History</a></li>\n <li><a href=\"#extract-data\" id=\"markdown-toc-extract-data\">Extract Data</a></li>\n </ol>\n </li>\n <li><a href=\"#resources\" id=\"markdown-toc-resources\">Resources</a></li>\n</ol>\n\n<hr />\n\n<h2 id=\"flag-1\">Flag 1</h2>\n\n<h3 id=\"find-profile\">Find Profile</h3>\n\n<p>Lets first, as always get the profile of this device from the memory dump. Again,\nwe will use the tool Volatility for this challenge. Let’s extract the archive we\nare given with the <code class=\"language-plaintext highlighter-rouge\">.raw</code> file inside and get cracking!</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw imageinfo\n...\nSuggested Profile<span class=\"o\">(</span>s<span class=\"o\">)</span> : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64\n24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418\n    AS Layer1 : WindowsAMD64PagedMemory <span class=\"o\">(</span>Kernel AS<span class=\"o\">)</span>\n...\n</code></pre></div></div>\n\n<p>For the rest of this challenge, let’s stick with the first profile that Volatility\nsuggests for us: <code class=\"language-plaintext highlighter-rouge\">Win7SP1x64</code>.</p>\n\n<h3 id=\"process-list\">Process List</h3>\n\n<p>We have our profile now, so lets look at each process running on the system on\nthe RAM, to do this I’m going to go with the <code class=\"language-plaintext highlighter-rouge\">pstree</code> command instead of <code class=\"language-plaintext highlighter-rouge\">pslist</code>\nbecause the output is much more organized in a way that shows parent/child processes.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 pstree\n 0xfffffa8000e9a110:explorer.exe     2664   2632     19    632 2019-12-14 10:36:29 UTC+0000\n<span class=\"nb\">.</span> 0xfffffa8000edcb30:VBoxTray.exe    2792   2664     12    139 2019-12-14 10:36:30 UTC+0000\n<span class=\"nb\">.</span> 0xfffffa80022e5950:cmd.exe         2096   2664      1     19 2019-12-14 10:36:35 UTC+0000\n<span class=\"nb\">.</span> 0xfffffa8002109b30:chrome.exe      2296   2664     27    658 2019-12-14 10:36:45 UTC+0000\n.. 0xfffffa8001cc7a90:chrome.exe     2304   2296      8     71 2019-12-14 10:36:45 UTC+0000\n.. 0xfffffa8000ea2b30:chrome.exe     2964   2296     13    295 2019-12-14 10:36:47 UTC+0000\n.. 0xfffffa8000fae6a0:chrome.exe     2572   2296      8    177 2019-12-14 10:36:56 UTC+0000\n.. 0xfffffa800230eb30:chrome.exe     1632   2296     14    219 2019-12-14 10:37:12 UTC+0000\n.. 0xfffffa8000eea7a0:chrome.exe     2476   2296      2     55 2019-12-14 10:36:46 UTC+0000\n...\n 0xfffffa80011956a0:notepad.exe      3260   3180      1     61 2019-12-14 10:38:20 UTC+0000\n...\n</code></pre></div></div>\n\n<p>So here we can see a list of the running processes in a tree form which is better\nbecause we know which process spawned what, and right away we can see two suspicious\nseparate trees of target processes. Im going to be looking at the notepad one first,\nI’m almost certain there has to be a flag somewhere in that, all characters typed\ninto notepad is stored into memory somewhere so lets target that first.</p>\n\n<h3 id=\"command-scan\">Command Scan</h3>\n\n<p>Just for process sake, I’m going to first see if there is any useful commands\nbeing run. Let’s check using <code class=\"language-plaintext highlighter-rouge\">cmdscan</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 cmdscan\n<span class=\"k\">**************************************************</span>\nCommandProcess: conhost.exe Pid: 2068\nCommandHistory: 0x3deb10 Application: cmd.exe Flags: Allocated, Reset\nCommandCount: 1 LastAdded: 0 LastDisplayed: 0\nFirstCommand: 0 CommandCountMax: 50\nProcessHandle: 0x60\nCmd <span class=\"c\">#0 @ 0x3db330: Nothing here kids :)</span>\nCmd <span class=\"c\">#15 @ 0x3a0158: =</span>\nCmd <span class=\"c\">#16 @ 0x3ddc80: &gt;</span>\n<span class=\"k\">**************************************************</span>\n...\n</code></pre></div></div>\n\n<p>Well this might be a wild goose chase but it also could be hiding something happening,\nso let’s remember to keep this in the back of our heads. For now lets move on.</p>\n\n<h3 id=\"check-stdout\">Check stdout</h3>\n\n<p>Next, again for the sake of the process of doing this, let’s just check stdout\nin case there is anything useful in there. We will use <code class=\"language-plaintext highlighter-rouge\">consoles</code> for this:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 consoles\nConsoleProcess: conhost.exe Pid: 2068\nConsole: 0xff1e6200 CommandHistorySize: 50\nHistoryBufferCount: 1 HistoryBufferMax: 4\nOriginalTitle: %SystemRoot%<span class=\"se\">\\s</span>ystem32<span class=\"se\">\\c</span>md.exe\nTitle: C:<span class=\"se\">\\W</span>indows<span class=\"se\">\\s</span>ystem32<span class=\"se\">\\c</span>md.exe\nAttachedProcess: cmd.exe Pid: 2096 Handle: 0x60\n<span class=\"nt\">----</span>\nCommandHistory: 0x3deb10 Application: cmd.exe Flags: Allocated, Reset\nCommandCount: 1 LastAdded: 0 LastDisplayed: 0\nFirstCommand: 0 CommandCountMax: 50\nProcessHandle: 0x60\nCmd <span class=\"c\">#0 at 0x3db330: Nothing here kids :)</span>\n<span class=\"nt\">----</span>\nScreen 0x3c0ff0 X:80 Y:300\nDump:\nMicrosoft Windows <span class=\"o\">[</span>Version 6.1.7601]\nCopyright <span class=\"o\">(</span>c<span class=\"o\">)</span> 2009 Microsoft Corporation.  All rights reserved.\n\nC:<span class=\"se\">\\U</span>sers<span class=\"se\">\\S</span>martNet&gt;Nothing here kids :<span class=\"o\">)</span>\n<span class=\"s1\">'Nothing'</span> is not recognized as an internal or external <span class=\"nb\">command</span>,\noperable program or batch file.\n\nC:<span class=\"se\">\\U</span>sers<span class=\"se\">\\S</span>martNet&gt;\n...\n</code></pre></div></div>\n\n<p>Well, I guess it was just a wild goose chase, of course <code class=\"language-plaintext highlighter-rouge\">Nothing here kids :)</code>\nisn’t a valid command so it just gave an error, we can move on knowing this was\nnothing though at least.</p>\n\n<h3 id=\"environment-variables\">Environment Variables</h3>\n\n<p>This is a weird one… Lets check our environment variables (this is just the way\nI like to do it to cover all ends). To do this we will use the <code class=\"language-plaintext highlighter-rouge\">envars</code> function:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 envars\n...\n3852 conhost.exe   0x000000000014d880 NEW_TMP    C:<span class=\"se\">\\W</span>indows<span class=\"se\">\\Z</span>mxhZ3t3M2xjMG0zX1QwXyRUNGczXyFfT2ZfTDRCXzJ9\n...\n</code></pre></div></div>\n\n<p>See how I said this was weird… Well look what is right there in plain sight,\na freaking base64 string lol! How funny is that! I was checking envars just for\nprocess sake and it ended up saving me, thankyou Mr. Process sir! Lets convert\nthis base64 string real quick and see what we get:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s2\">\"ZmxhZ3t3M2xjMG0zX1QwXyRUNGczXyFfT2ZfTDRCXzJ9\"</span> | <span class=\"nb\">base64</span> <span class=\"nt\">-d</span> -\nflag<span class=\"o\">{</span>w3lc0m3_T0_<span class=\"nv\">$T4g3_</span><span class=\"o\">!</span>_Of_L4B_2<span class=\"o\">}</span>%\n</code></pre></div></div>\n\n<p>Well would you look at that, we have our first flag and by complete accident!\nHow awesome is that haha! Move on to the next flag? I think we shall!</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>flag{w3lc0m3_T0_$T4g3_!_Of_L4B_2}\n</code></pre></div></div>\n\n<hr />\n\n<h2 id=\"flag-2\">Flag 2</h2>\n\n<h3 id=\"hash-dump\">Hash dump</h3>\n\n<p>Well the process didn’t fail us before, lets see if it can keep helping us, I’m going\nto check the hashes from <code class=\"language-plaintext highlighter-rouge\">hasdump</code> real quick to see if there are any useful ones,\nif not we can move on:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 hasdump\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSmartNet:1001:aad3b435b51404eeaad3b435b51404ee:4943abb39473a6f32c11301f4987e7e0:::\nHomeGroupUser<span class=\"nv\">$:</span>1002:aad3b435b51404eeaad3b435b51404ee:f0fc3d257814e08fea06e63c5762ebd5:::\nAlissa Simpson:1003:aad3b435b51404eeaad3b435b51404ee:f4ff64c8baac57d22f22edc681055ba6:::\n</code></pre></div></div>\n\n<p>-&gt;</p>\n\n<table>\n <tbody>\n <tr>\n <td>Administrator</td>\n <td> </td>\n </tr>\n <tr>\n <td>Guest</td>\n <td> </td>\n </tr>\n <tr>\n <td>SmartNet</td>\n <td>smartnet123</td>\n </tr>\n <tr>\n <td>HomeGroupUser</td>\n <td>NotFound</td>\n </tr>\n <tr>\n <td>Alissa Simpson</td>\n <td>goodmorningindia</td>\n </tr>\n </tbody>\n</table>\n\n<p>Well it looks like all of these are the same as in the first lab, but thats okay,\nwe know that for sure now so can check that off our list.</p>\n\n<h3 id=\"memory-dump-notepad\">Memory Dump Notepad</h3>\n\n<p>Okay, so I’m finally gonna point my full focus to <code class=\"language-plaintext highlighter-rouge\">notepad.exe</code> now, our standard\nprocess is pretty much over and we’ve found the first flag, so let’s get to Notepad\nnow. First thing first, let’s get a dump of this executable, <code class=\"language-plaintext highlighter-rouge\">memdump</code> is the perfect\ntool for this. Remember to look back at ur <code class=\"language-plaintext highlighter-rouge\">pstree</code> to find the PID of <code class=\"language-plaintext highlighter-rouge\">notepad.exe</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># `-p` specifies PID, `-D` is dump directory</span>\n❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 memdump <span class=\"nt\">-p</span> 3260 <span class=\"nt\">-D</span> <span class=\"nb\">.</span>\n</code></pre></div></div>\n\n<p>So because we are looking through notepad.exe memory, I decided that we could\njust try looking at strings in the file (<code class=\"language-plaintext highlighter-rouge\">strings 3260.dmp | less</code>) and scrolling\nthrough I found a very useful output that I can’t remember where I actually saw\nsomewhere else as well.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>C:<span class=\"se\">\\W</span>indows<span class=\"se\">\\s</span>ystem32<span class=\"se\">\\N</span>OTEPAD.EXE\nC:<span class=\"se\">\\U</span>sers<span class=\"se\">\\S</span>martNet<span class=\"se\">\\S</span>ecrets<span class=\"se\">\\H</span>idden.kdbx\nf97<span class=\"o\">)</span>l\n<span class=\"s2\">\"C:</span><span class=\"se\">\\W</span><span class=\"s2\">indows</span><span class=\"se\">\\s</span><span class=\"s2\">ystem32</span><span class=\"se\">\\N</span><span class=\"s2\">OTEPAD.EXE\"</span> C:<span class=\"se\">\\U</span>sers<span class=\"se\">\\S</span>martNet<span class=\"se\">\\S</span>ecrets<span class=\"se\">\\H</span>idden.kdbx\n</code></pre></div></div>\n\n<p>You know what I think I noticed this in a <code class=\"language-plaintext highlighter-rouge\">cmdline</code> scan through. Lets check:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 cmdline\n...\nKeePass.exe pid:   3008\nCommand line : <span class=\"s2\">\"C:</span><span class=\"se\">\\P</span><span class=\"s2\">rogram Files (x86)</span><span class=\"se\">\\K</span><span class=\"s2\">eePass Password Safe 2</span><span class=\"se\">\\K</span><span class=\"s2\">eePass.exe\"</span> <span class=\"s2\">\"C:</span><span class=\"se\">\\U</span><span class=\"s2\">sers</span><span class=\"se\">\\S</span><span class=\"s2\">martNet</span><span class=\"se\">\\S</span><span class=\"s2\">ecrets</span><span class=\"se\">\\H</span><span class=\"s2\">idden.kdbx\"</span>\n...\n<span class=\"k\">************************************************************************</span>\nnotepad.exe pid:   3260\nCommand line : <span class=\"s2\">\"C:</span><span class=\"se\">\\W</span><span class=\"s2\">indows</span><span class=\"se\">\\s</span><span class=\"s2\">ystem32</span><span class=\"se\">\\N</span><span class=\"s2\">OTEPAD.EXE\"</span> C:<span class=\"se\">\\U</span>sers<span class=\"se\">\\S</span>martNet<span class=\"se\">\\S</span>ecrets<span class=\"se\">\\H</span>idden.kdbx\n...\n</code></pre></div></div>\n\n<p>Well would you look at that! A password manager! Looking up <code class=\"language-plaintext highlighter-rouge\">.kdbx</code> file type,\nI found that sure enough it is the password database file for <code class=\"language-plaintext highlighter-rouge\">KeePass Password\nSafe 2</code>. I wonder why the user is opening this file in notepad though, lets try\nextracting this file in a sec, but I’m not content yet enough with notepad. In\na resource posted below, supposedly notepad stores text in memory as 16-bit\nlittle endian so lets run strings again but with these two traits in mind.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># `-e` is for encoding, `l` is for 16 bit little endian</span>\nstrings <span class=\"nt\">-e</span> l 3260.dmp | less\n...\nSimpson<span class=\"se\">\\A</span>ppData<span class=\"se\">\\R</span>oaming<span class=\"se\">\\M</span>icrosoft<span class=\"se\">\\W</span>indows<span class=\"se\">\\R</span>ecent<span class=\"se\">\\H</span>idden.kdbx.lnk\n...\nGoogle Chrome.lnk\nChrome\nPassword.png\nPassword.lnk\nPassword.png\nPassword.lnk\n%USERPROFILE%<span class=\"se\">\\A</span>ppData<span class=\"se\">\\L</span>ocal<span class=\"se\">\\M</span>icrosoft<span class=\"se\">\\W</span>indows<span class=\"se\">\\H</span>istory<span class=\"se\">\\H</span>istory.IE5<span class=\"se\">\\M</span>SHist012019121420191215\n:2019121420191215:\nMy Pictures\nMy Pictures.lnk\nMy Pictures\nMy Pictures.lnk\n@7:<span class=\"se\">\\W</span>\nHidden.kdbx\nHidden.kdbx.lnk\n%0rog\nHidden.kdbx\nHidden.kdbx.lnk\nSecrets\nSecrets.lnk\n...\n<span class=\"se\">\\D</span>evice<span class=\"se\">\\H</span>arddiskVolume2<span class=\"se\">\\U</span>sers<span class=\"se\">\\A</span>lissa Simpson<span class=\"se\">\\A</span>ppData<span class=\"se\">\\R</span>oaming<span class=\"se\">\\M</span>icrosoft<span class=\"se\">\\W</span>indows<span class=\"se\">\\R</span>ecent<span class=\"se\">\\H</span>idden.kdbx.lnk\n...\n</code></pre></div></div>\n\n<p>There was quite a bit of information in this executable, here are some of the\nlines that were most suspicious and interesting that I found, there are probably\nso many more too but that dmp file was massive. With <code class=\"language-plaintext highlighter-rouge\">strings</code> using those flags\nso much more was cleartext compared to the first time we tried strings.</p>\n\n<p>I think it’s about time we try to dump some files, the most interesting one right\nnow has to be <code class=\"language-plaintext highlighter-rouge\">Hidden.kdbx</code> so lets do that.</p>\n\n<h3 id=\"dump-files\">Dump Files</h3>\n\n<p>Dumping files is easier than it sounds once you know how to do it. Letst start\nfirst by using <code class=\"language-plaintext highlighter-rouge\">filescan</code> to find the exact offset of the file we are trying to\ndump:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 filescan | <span class=\"nb\">grep</span> <span class=\"nt\">-i</span> <span class=\"s2\">\"Hidden\"</span>\n0x000000003fb112a0     16      0 R--r-- <span class=\"se\">\\D</span>evice<span class=\"se\">\\H</span>arddiskVolume2<span class=\"se\">\\U</span>sers<span class=\"se\">\\S</span>martNet<span class=\"se\">\\S</span>ecrets<span class=\"se\">\\H</span>idden.kdbx\n</code></pre></div></div>\n\n<p>To dump this file we will use the <code class=\"language-plaintext highlighter-rouge\">dumpfiles</code> command, set our offset with <code class=\"language-plaintext highlighter-rouge\">-Q</code>,\nand our dump directory with <code class=\"language-plaintext highlighter-rouge\">-D</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ volatility <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw <span class=\"nt\">--profile</span> Win7SP1x64 dumpfiles <span class=\"nt\">-O</span> 0x000000003fb112a0 <span class=\"nt\">-D</span> <span class=\"nb\">.</span>\nDataSectionObject 0x3fb112a0   None   <span class=\"se\">\\D</span>evice<span class=\"se\">\\H</span>arddiskVolume2<span class=\"se\">\\U</span>sers<span class=\"se\">\\S</span>martNet<span class=\"se\">\\S</span>ecrets<span class=\"se\">\\H</span>idden.kdbx\n</code></pre></div></div>\n\n<p>Awesome, we now have the hidden secrets database file, shall we try breaking it open?\nSo, I tried downloading KeyPass software actually (open source keypassxc if you care\nto know) but when trying to open the file we got from our dump it requires a master\npassword which stinks for us but is all part of the fun, we just have to find a way\nto get into the database.</p>\n\n<p>So some time has passed and I haven’t gotten very far, tried many different things,\ndumped a few more files, but to no visible avail, I feel like I’m totally overlooking\nsomething.</p>\n\n<p>About another 15 minutes passed and somehow my eye caught <code class=\"language-plaintext highlighter-rouge\">Password.png</code> in\n<a href=\"#memory-dump-notepad\">Memory Dump Notepad</a>, how did I not even notice this before.\nLets dump this file. I think you know how to by now, and open it in an image viewer.\nOh my goodness!!! This is such a useful picture!!! First, they give us a blog to view\n<a href=\"https://volatilevirus.home.blog\">VolatileVirus</a> and second, if you look closely at the\nbottom right it says:</p>\n\n<blockquote>\n <p>“Psst!! password is P4SSw0rd_123”</p>\n</blockquote>\n\n<p>No way!! Let’s try this with the KeePass software on the Hidden.kdbx file that we\ndumped!! By the way, be sure to cp the dump <code class=\"language-plaintext highlighter-rouge\">.dat</code> file to a file with <code class=\"language-plaintext highlighter-rouge\">.kdbx</code> or\nKeePass won’t be able to see it. IT WORKS! The password works guys! We now are into\nthat database that had us stumped for quite a bit! If you are using KeePassXC (Cross\nPlatform and Open Source version) if you view <code class=\"language-plaintext highlighter-rouge\">General</code> there are 4 fake keys in\nthere, these obviously aren’t helpful, don’t fret though, check the <code class=\"language-plaintext highlighter-rouge\">Recycle Bin</code>\ntab. Yep, that’s right… we just got our second flag! Double click on the entry\nwith title <code class=\"language-plaintext highlighter-rouge\">Sabka Baap</code> and username <code class=\"language-plaintext highlighter-rouge\">Flag</code>, this will open the Edit Entry menu,\nand finally click the little eye icon to view that password… there we go, our\nsecond flag for lab 2!!</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>flag{w0w_th1s_1s_Th3_SeC0nD_ST4g3_!!}\n</code></pre></div></div>\n\n<hr />\n\n<h2 id=\"flag-3\">Flag 3</h2>\n\n<p>Movind on to our third flag, I think I’m feeling really confident now,\nsure the second flag threw us on some wacky wild goose chases and stumped\nus for a bit at some points in it, but we got it and sure enough it was\njust a little image we originally missed that got us there. We still have\nto check that blog out now too don’t we! Maybe it can help us find the third\nand final flag and call this challenge a win!</p>\n\n<h3 id=\"chrome-history\">Chrome History</h3>\n<p>So the last step in this challenge just has to be something to do with a browser\nand that would most likely be chrome. After some digging around, I found someone\nwho created some volatility plugins for different functions to enumerate multiple\nchrome functions. These are on a <a href=\"https://github.com/superponible/volatility-plugins\">git repo</a>,\nclone them wherever and I’ll show you how to point volatility to use these! So\nthe <code class=\"language-plaintext highlighter-rouge\">chromehistory.py</code> file in this repo actually has multiple usable chrome\nfunctions <a href=\"https://blog.superponible.com/2014/08/31/volatility-plugin-chrome-history/\">shown here</a>\nbut the one we want to check right now would just be <code class=\"language-plaintext highlighter-rouge\">chromehistory</code> because\nI just want to see what the heck our victim was viewing on his favorite browser.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Simply specify the directory of the plugins you want to use, everything else</span>\n<span class=\"c\"># is the same, don't need a profile though</span>\n❱ vol.py <span class=\"nt\">--plugins</span><span class=\"o\">=</span>~/Downloads/volatility-plugins/ <span class=\"nt\">-f</span> <span class=\"k\">*</span>.raw chromehistory\nIndex  URL                                                                              Title                                                                            Visits Typed Last Visit Time            Hidden Favicon ID\n<span class=\"nt\">------</span> <span class=\"nt\">--------------------------------------------------------------------------------</span> <span class=\"nt\">--------------------------------------------------------------------------------</span> <span class=\"nt\">------</span> <span class=\"nt\">-----</span> <span class=\"nt\">--------------------------</span> <span class=\"nt\">------</span> <span class=\"nt\">----------</span>\n    34 https://bi0s.in/                                                                 Amrita Bios                                                                           1     1 2019-12-14 10:37:11.596681        N/A\n    33 http://bi0s.in/                                                                  Amrita Bios                                                                           1     0 2019-12-14 10:37:11.596681        N/A\n    32 https://mega.nz/#F!TrgSQQTS!H0ZrUzF0B-ZKNM3y9E76lg                               MEGA                                                                                  2     0 2019-12-14 10:21:39.602970        N/A\n    31 https://www.ndtv.com/                                                            NDTV: Latest News, India News, Breaking...s, Bollywood, Cricket, Videos &amp; Photos      1     1 2019-12-14 10:18:09.449115        N/A\n    30 http://ndtv.com/                                                                 NDTV: Latest News, India News, Breaking...s, Bollywood, Cricket, Videos &amp; Photos      1     0 2019-12-14 10:18:09.449115        N/A\n    28 http://blog.bi0s.in/                                                             bi0s                                                                                  1     0 2019-12-14 09:41:52.269568        N/A\n    29 https://blog.bi0s.in/                                                            bi0s                                                                                  1     1 2019-12-14 10:18:12.073607        N/A\n    27 https://r3xnation.wordpress.com/about/                                           About – R3xNation                                                                   1     0 2019-12-14 10:07:31.296539        N/A\n    26 https://www.youtube.com/                                                         YouTube                                                                               1     1 2019-12-14 10:04:59.173510        N/A\n    24 http://in.yahoo.com/                                                             Yahoo India | News, Finance, Cricket, Lifestyle and Entertainment                     1     0 2019-12-14 09:33:25.210345        N/A\n    23 http://yahoo.in/                                                                 Yahoo India | News, Finance, Cricket, Lifestyle and Entertainment                     1     1 2019-12-14 09:33:25.210345        N/A\n    25 https://in.yahoo.com/                                                            Yahoo India | News, Finance, Cricket, Lifestyle and Entertainment                     2     0 2019-12-14 09:33:32.266003        N/A\n    21 https://www.bbc.com/sport/football/50780855                                      Jurgen Klopp signs new Liverpool deal <span class=\"k\">until </span>2024 - BBC Sport                          1     0 2019-12-14 09:31:35.842850        N/A\n    19 https://bbc.com/                                                                 BBC - Homepage                                                                        1     1 2019-12-14 09:30:55.836868        N/A\n    18 http://bbc.com/                                                                  BBC - Homepage                                                                        1     0 2019-12-14 09:30:55.836868        N/A\n    20 https://www.bbc.com/                                                             BBC - Homepage                                                                        1     0 2019-12-14 09:30:55.836868        N/A\n    17 https://volatilevirus.home.blog/blog-posts/                                      Blog Posts – Abhiram<span class=\"s1\">'s Blog                                                         1     0 2019-12-14 10:07:35.236223        N/A\n    16 https://ashutosh1206.github.io/writeups/                                         Writeups | Ashutosh                                                                   1     0 2019-12-14 10:07:32.324863        N/A\n    15 https://www.india.com/                                                           Latest India News, Breaking News, Entertainment News | India.com News                 1     1 2019-12-14 09:30:08.206258        N/A\n    14 https://www.onlinesbi.com/                                                       State Bank of India                                                                   1     1 2019-12-14 09:29:37.802253        N/A\n    12 http://ashutosh1206.github.io/                                                   Home | Ashutosh                                                                       1     0 2019-12-14 09:29:33.876790        N/A\n    13 https://ashutosh1206.github.io/                                                  Home | Ashutosh                                                                       1     1 2019-12-14 09:29:33.876790        N/A\n    10 http://r3xnation.wordpress.com/                                                  R3xNation – Free Flowing passions                                                   1     0 2019-12-14 09:29:17.212089        N/A\n     9 https://volatilevirus.home.blog/                                                 Abhiram'</span>s Blog – Dying Is The Day Worth Living For!!                                1     1 2019-12-14 09:27:31.877522        N/A\n     8 http://volatilevirus.home.blog/                                                  Abhiram<span class=\"s1\">'s Blog – Dying Is The Day Worth Living For!!                                1     0 2019-12-14 09:27:31.877522        N/A\n    11 https://r3xnation.wordpress.com/                                                 R3xNation – Free Flowing passions                                                   1     1 2019-12-14 09:29:17.212089        N/A\n     7 https://www.facebook.com/                                                        Facebook – log in or sign up                                                        3     1 2019-12-14 09:33:15.814086        N/A\n     4 http://bing.com/                                                                 Bing                                                                                  1     0 2019-12-14 09:16:18.118193        N/A\n     6 https://www.bing.com/?toWww=1&amp;redig=2BBD701F84AA44D2A71D870534D085AE             Bing                                                                                  1     0 2019-12-14 09:33:00.366479        N/A\n     5 https://bing.com/                                                                Bing                                                                                  1     1 2019-12-14 09:16:18.118193        N/A\n     3 https://www.google.com/                                                          Google                                                                                2     1 2019-12-14 09:32:52.147284        N/A\n     2 https://chrome.google.com/webstore/category/extensions?hl=en                     Chrome Web Store - Extensions                                                         1     0 2019-12-14 09:32:53.844597        N/A\n     1 https://chrome.google.com/webstore?hl=en                                         Chrome Web Store - Extensions                                                         1     0 2019-12-14 09:16:05.724461        N/A\n</span></code></pre></div></div>\n\n<p>Here is what we got, any useful information in here?</p>\n\n<blockquote>\n <p>Side note: I completely missed the mega link there somehow the first time I looked\nthrough this so that wasted some time going through each of these links haha!</p>\n</blockquote>\n\n<h3 id=\"extract-data\">Extract Data</h3>\n\n<p>Yes! A mega link, that is completely suspicious, let’s check it out! Woah its a <code class=\"language-plaintext highlighter-rouge\">zip</code>\nfile named <code class=\"language-plaintext highlighter-rouge\">Important.zip</code>, this has to be the final flag! I downloaded the zip\nto my system, tried to extract it and got this:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ unzip Important.zip\nArchive:  Important.zip\nPassword is SHA1<span class=\"o\">(</span>stage-3-FLAG<span class=\"o\">)</span> from Lab-1. Password is <span class=\"k\">in </span>lowercase.\n   skipping: Important.png           unsupported compression method 99\n</code></pre></div></div>\n\n<p>Well luckily we did Lab-1, lets retrieve that flag real quick and convert it using\n<a href=\"https://gchq.github.io/CyberChef/#recipe=SHA1()\">CyberChef</a>, paste our flag in,\n(<code class=\"language-plaintext highlighter-rouge\">flag{w3ll_3rd_stage_was_easy}</code>), add SHA1 algorithm and we should automatically get\nour password there:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>6045dd90029719a039fd2d2ebcca718439dd100a\n</code></pre></div></div>\n\n<p>Lets use this on our zip file and see if this works. Great it did! View the image\nand there we go… we got our third and final flag!! We completed another LAB totally\non our own! This is so exciting!</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>flag{oK_So_Now_St4g3_3_is_DoNE!!}\n</code></pre></div></div>\n\n<hr />\n\n<p>Hope you enjoyed this blog, this challenge was so fun just like the previous. This\none also seemed to feel quite a large bit easier as well though, maybe that is because\nMemLabs was being kind, or we are just getting used to volatility and memory forensics\nwhich what I hope it is haha! Hope you guys have a good rest of you day, was a blast\nyall! Shado Out!</p>\n\n<hr />\n\n<h2 id=\"resources\">Resources</h2>\n\n<ul>\n <li><a href=\"https://github.com/stuxnet999/MemLabs/tree/master/Lab%202\">MemLabs: Lab 2</a></li>\n <li><a href=\"https://github.com/volatilityfoundation/volatility/wiki/Command-Reference\">Volatility Command list</a></li>\n <li><a href=\"https://downloads.volatilityfoundation.org/releases/2.4/CheatSheet_v2.4.pdf\">Another Volatility Cheatsheet PDF</a></li>\n <li><a href=\"https://www.andreafortuna.org/2018/03/02/volatility-tips-extract-text-typed-in-a-notepad-window-from-a-windows-memory-dump/\">Find notepad strings in memory</a></li>\n</ul>\n","dir":"/blog/Security/MemLabs/","name":"MEM_Lab2.md","path":"blog/Security/MemLabs/MEM_Lab2.md","url":"/blog/Security/MemLabs/LAB2"},{"layout":"default","author":"Shadorain","title":"MemLabs","nav_order":0,"permalink":"/blog/Security/MemLabs/","grand_parent":"My Blog","parent":"Security","has_children":true,"content":"<h1 class=\"no_toc\" id=\"memlabs-challenges\">MemLabs Challenges</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#labs\" id=\"markdown-toc-labs\">Labs</a></li>\n</ol>\n\n<hr />\n\n<h2 id=\"labs\">Labs</h2>\n\n<ul>\n <li><a href=\"/blog/Security/MemLabs/LAB1\">LAB1 : Beginner’s Luck</a></li>\n <li><a href=\"/blog/Security/MemLabs/LAB2\">LAB2 : A New World</a></li>\n</ul>\n","dir":"/blog/Security/MemLabs/","name":"index.md","path":"blog/Security/MemLabs/index.md","url":"/blog/Security/MemLabs/"},{"layout":"default","author":"Shadorain","title":"Crackme’s Not Main – Writeup","content":"# Crackme's Not Main -- Writeup\n\n## Introduction\n\nFor all my solutions, I will use radare2: a fantastic terminal user interface\nreversing tool that amazes me daily on its immense potential. So when I use a\n`:> ` it is a radare2 shell command (from Visual modes you can get to this via\nthe `:` key just like in vim). When I use `❱ ` it is referring to a normal shell\ncommand. With that out of the way let's get to the meat of it!\n\n---\n\n## First Check\n\n```nasm\nlea rax, [var_60h]\nmov rsi, rdx\nmov rdi, rax\ncall sym.imp.strcmp\n```\n\n```bash\n❱ afvd # check existing variables\n...var var_60h = 0x7ffc230acea0 = (qword)0x0000004d4e432f2e...\n❱ ps @ 0x7ffc230acea0 # print string of address\n./CNM\n```\n\nLets try setting a breakpoint right after the first jump `0x55a41a4591fe`.\nIt seems `strcmp` is comparing our first input with `var_60h`:`./CNM`, it's\njust the name of the crackme binary. Set the breakpoint, continue to it and\ntest our first input:\n\n```bash\n:> db 0x55a41a4591fe\n:> dc\nEnter Key: ./CNM\n```\n\nOoh nice it hit our breakpoint! This means our first input was correct, onto\nthe next one!\n\n```note\nIf you've looked ahead at all after that first check, we need to go right from\nhere on down the graph (VV), this means we need all our jumps to be true to reach\nthis block that gives us our win: `0x55a41a4592a0`.\n```\n\n## Second Check\n\nI was looking way too deeply this whole time. Reading every line of assembler\nisn't always the way to go. I learned this the hard way when I popped open\na `:> vvv` for some reason the colors of the numbers in the `cmp` statements popped out to be and I realized, why didn't I just go down the list of all the blocks\nand check them in the binary... turns out that worked :') **sigh**. It was as simple\nas acknowledging the scanf's format string as `%d` and putting the right number\nin that the cmp checked for, but I for some reason wanted to read every line and\nvariable. But! It's okay because we have a solution!\n\n```nasm\nlea rdi, 0x558e62ba78ff ; %d\nmov eax, 0\ncall sym.imp.__isoc99_scanf\nmov eax, dword [var_6ch]\ncmp eax, 1\n```\n\nHere, the program takes the format string `%d` and puts it into the `rdi` register,\nthen set `eax` to `0`, and calls the `scanf` method to get input from the user which\ngets put into the `var_6ch` variable and compared with `0x1` sending us to the next\nblock if the compare passes. This repeats for the next three checks:\n\n```nasm\n...\ncmp eax, 7\n...\ncmp eax, 8\n...\ncmp eax, 5\n...\n```\n\n`eax` gets cleared (set to 0), `scanf` for input and `cmp` for correct number.\n\n```bash\n❱ ./CNM\nEnter Key: ./CNM\n1\n7\n8\n5\nGood Key!\n```\n\nLook-y here its our fine solution, simple as that!\n\n---\n\n## Closing\n\nOverthinking sure can lead one on a serious wild goose chase, but this has been\na fun crackme and my first completed without any guidance at all! Has been a\nnice learning experience for radare2 as well which is very nice.\n\nHope you enjoy this writeup and learned a bit about radare2 and reverse engineering!\nI sure did! Thanks for reading! Shado out.\n","dir":"/blog/Security/Reversing/","name":"Crackme_CNM.md","path":"blog/Security/Reversing/Crackme_CNM.md","url":"/blog/Security/Reversing/Crackme_CNM.html"},{"layout":"default","author":"Shadorain","title":"Reversing","nav_order":0,"permalink":"/blog/Security/Reversing/","grand_parent":"My Blog","parent":"Security","has_children":true,"content":"<h1 class=\"no_toc\" id=\"reverse-engineering\">Reverse Engineering</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n\n<hr />\n\n","dir":"/blog/Security/Reversing/","name":"index.md","path":"blog/Security/Reversing/index.md","url":"/blog/Security/Reversing/"},{"layout":"default","author":"Shadorain","title":"Exploiting LXD","permalink":"/blog/Security/Exploiting-LXD","parent":"Security","grand_parent":"My Blog","has_children":false,"content":"<h1 class=\"no_toc\" id=\"exploiting-lxd\">Exploiting LXD</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#what-is-lxd\" id=\"markdown-toc-what-is-lxd\">What is LXD?</a></li>\n <li><a href=\"#exploitation\" id=\"markdown-toc-exploitation\">Exploitation</a> <ol>\n <li><a href=\"#checks\" id=\"markdown-toc-checks\">Checks</a></li>\n </ol>\n </li>\n</ol>\n\n<hr />\n\n<h2 id=\"what-is-lxd\">What is LXD?</h2>\n\n<h2 id=\"exploitation\">Exploitation</h2>\n<h3 id=\"checks\">Checks</h3>\n<p>First check if LXD is even on the machine you are attempting to attack. You can do this by running <code class=\"language-plaintext highlighter-rouge\">id</code>:<br />\n <code class=\"language-plaintext highlighter-rouge\">uid=1000(shado) gid=1000(shado) groups=1000(shado),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)</code></p>\n\n<p>Test https://www.hackingarticles.in/lxd-privilege-escalation/</p>\n","dir":"/blog/Security/","name":"exploit-lxd.md","path":"blog/Security/exploit-lxd.md","url":"/blog/Security/Exploiting-LXD"},{"layout":"default","author":"Shadorain","title":"Security","permalink":"/blog/Security/","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 class=\"no_toc text-delta\" id=\"security\">Security</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#memlabs\" id=\"markdown-toc-memlabs\">MemLabs</a></li>\n <li><a href=\"#reverse-engineering\" id=\"markdown-toc-reverse-engineering\">Reverse Engineering</a></li>\n <li><a href=\"#miscellaneous\" id=\"markdown-toc-miscellaneous\">Miscellaneous</a></li>\n</ol>\n\n<hr />\n\n<h2 id=\"memlabs\">MemLabs</h2>\n\n<ul>\n <li><a href=\"/blog/Security/MemLabs/LAB1\">LAB1 : Beginner’s Luck</a></li>\n <li><a href=\"/blog/Security/MemLabs/LAB2\">LAB2 : A New World</a></li>\n</ul>\n\n<h2 id=\"reverse-engineering\">Reverse Engineering</h2>\n\n<h2 id=\"miscellaneous\">Miscellaneous</h2>\n\n<ul>\n <li><a href=\"/blog/Security/Exploiting-LXD/\">Exploiting LXD</a></li>\n</ul>\n","dir":"/blog/Security/","name":"index.md","path":"blog/Security/index.md","url":"/blog/Security/"},{"layout":"default","author":"Shadorain","title":"Vim / Neovim","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"vim--neovim\">Vim / Neovim</h1>\n","dir":"/blog/Vim/","name":"index.md","path":"blog/Vim/index.md","url":"/blog/Vim/"},{"layout":"default","author":"Shadorain","title":"Window Managers","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"window-managers\">Window Managers</h1>\n","dir":"/blog/Window_Managers/","name":"index.md","path":"blog/Window_Managers/index.md","url":"/blog/Window_Managers/"},{"layout":"default","author":"Shadorain","title":"My Blog","sort":1,"permalink":"/blog/","content":"<h1 id=\"my-blog\">My Blog</h1>\n\n<ul>\n <li><a href=\"/blog/Assembly/\">Assembler</a></li>\n <li><a href=\"/blog/CLang/\">C Language</a>\n <ul>\n <li><a href=\"/blog/CLang/Dynamic-Memory-Allocation\">Dynamic Memory Allocation</a></li>\n </ul>\n </li>\n <li><a href=\"/blog/Emacs/\">Emacs</a></li>\n <li><a href=\"/blog/HackTheBox/\">Hack the Box</a>\n <ul>\n <li><a href=\"/blog/HackTheBox/Cat\">Cat</a></li>\n </ul>\n </li>\n <li><a href=\"/blog/Haskell/\">Haskell</a></li>\n <li><a href=\"/blog/Latex/\">LaTeX</a></li>\n <li><a href=\"/blog/Linux/\">Linux</a>\n <ul>\n <li><a href=\"/blog/Linux/Hardening-Linux\">Hardening Linux</a></li>\n </ul>\n </li>\n <li><a href=\"/blog/Security/\">Security</a>\n <ul>\n <li><a href=\"/blog/Security/Exploiting-LXD\">Exploiting LXD</a></li>\n <li><a href=\"/blog/Security/MemLabs/\">MemLabs</a>\n <ul>\n <li><a href=\"/blog/Security/MemLabs/LAB1\">LAB1 : Beginners Luck</a></li>\n <li><a href=\"/blog/Security/MemLabs/LAB2\">LAB2 : A New World</a></li>\n </ul>\n </li>\n <li><a href=\"/blog/Security/Reversing/\">Reversing</a>\n <ul>\n <li><a href=\"/blog/Security/Reversing/Crackme_CNM.html\">Crackme’s Not Main – Writeup</a></li>\n </ul>\n </li>\n </ul>\n </li>\n <li><a href=\"/blog/Vim/\">Vim / Neovim</a></li>\n <li><a href=\"/blog/Window_Managers/\">Window Managers</a></li>\n</ul>\n","dir":"/blog/","name":"README.md","path":"blog/README.md","url":"/blog/"},{"layout":"default","author":"Shadorain","title":"Home","sort":1,"permalink":"/index.html","content":"<h1 class=\"fs-9\" id=\"shadohub-the-hub-for-shadows\">Shadohub, the hub for shadows!</h1>\n\n<p class=\"fs-6 fw-300\">Hello! Welcome to my site! \nHere i cover some cool topics in my blog, and also hope to grow this site to be much more as well!</p>\n\n<p><a href=\"/blog/\" class=\"btn btn-primary fs-5 mb-4 mb-md-0 mr-2\">My Blog</a> <a href=\"https://github.com/Shadorain/\" class=\"btn fs-5 mb-4 mb-md-0\">Check out my GitHub</a></p>\n\n<hr />\n\n<h2 id=\"getting-started\">Getting started</h2>\n<p>This site shouldnt be too complicated to navigate.\nClick the button above or the menu on the side named <code class=\"language-plaintext highlighter-rouge\">My Blog</code> to get to my blog.\nOther things will come, some ideas are down below! My contact info is at the bottom of <a href=\"/about.html\">About</a></p>\n\n<h2 id=\"site-ideas\">Site Ideas</h2>\n<ul>\n <li>Host a CTF on here, or atleast challenges!</li>\n <li>Discussion Forum</li>\n <li>Coding competitions?</li>\n <li>And some more to come…</li>\n</ul>\n\n<p><img src=\"/assets/images/logo.png\" style=\"display:block;margin-left:auto;margin-right:auto;width:50%;\" /></p>\n","dir":"/","name":"index.md","path":"index.md","url":"/index.html"},{"layout":"default","author":"Shadorain","title":"About","sort":99,"content":"<h1 class=\"no_toc\" id=\"about\">About</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#god-first\" id=\"markdown-toc-god-first\">God First</a></li>\n <li><a href=\"#who-am-i\" id=\"markdown-toc-who-am-i\">Who am I</a></li>\n <li><a href=\"#hobbies\" id=\"markdown-toc-hobbies\">Hobbies</a> <ol>\n <li><a href=\"#what-i-run\" id=\"markdown-toc-what-i-run\">What i run</a></li>\n <li><a href=\"#security\" id=\"markdown-toc-security\">Security</a></li>\n </ol>\n </li>\n <li><a href=\"#contact-info\" id=\"markdown-toc-contact-info\">Contact Info</a></li>\n</ol>\n\n<hr />\n\n<h2 id=\"god-first\">God First</h2>\n<p>Christ is my Savior, and He will stay that for all of eternity. Feel free to email or message me and I will always be glad to talk to you about my Lord and Savior. Jesus comes before all else to me.</p>\n\n<hr />\n\n<h2 id=\"who-am-i\">Who am I</h2>\n<p><strong>Name:</strong> Jordan Ferraris<br />\n <strong>Age:</strong> 19<br />\n <strong>School:</strong> Geneva College<br />\n <strong>Year:</strong> Sophomore<br />\n <strong>Studies:</strong> Computer Science with a masters in Cyber Sec, most of my studies though are solo</p>\n\n<hr />\n\n<h2 id=\"hobbies\">Hobbies</h2>\n<h3 id=\"what-i-run\">What i run</h3>\n<p>Currently, I dual boot Gentoo with Void Linux, both of which are fabulous OS’s and quite minimal. Gentoo intrigues me daily with its solely source based repositories allowing for fully unique binaries in my system which increases security and much more. I enjoy ricing my system up quite alot as well, gotta be pretty (pretty good too)! \nHere is a breakdown:</p>\n<ul>\n <li>Linux (custom kernel on gentoo)</li>\n <li>Tiling Window Managers (Xmonad[main], dwm, bspwm)</li>\n <li>Vim/Neovim for all, but Emacs Org-mode for school or notes</li>\n <li>Purple is my favorite color in almost all shades so I created a custom colorscheme to match this!</li>\n</ul>\n\n<h3 id=\"security\">Security</h3>\n<p>I love all things low level (low level meaning as close to the machine code as one can get). Whether that is C language or Assembly. Within security topic, Reversing and Binary Exploitation have been quite intriguing to me. Either this or Kernel/Driver development is what I would like to pursue.\nI’m not incopetent in other sects of security though, I understand networking and general penetration testing well also but I mainly stick to the more Computer Science geared side of Security.</p>\n\n<hr />\n\n<h2 id=\"contact-info\">Contact Info</h2>\n<dl>\n <dt>GitHub</dt>\n <dd><a href=\"https://github.com/Shadorain/\">Shadorain</a></dd>\n <dt>Emails</dt>\n <dd><a href=\"mailto: shadorain7517@gmail.com\">Common</a><br />\n <a href=\"mailto: jordanf7517@gmail.com\">Personal</a></dd>\n <dt>Phone</dt>\n <dd>201-841-8296</dd>\n <dt>LinkedIn</dt>\n <dd><a href=\"https://www.linkedin.com/in/jordan-ferraris-8b3219188/\">Jordan Ferraris</a></dd>\n <dt>Stack Overflow</dt>\n <dd><a href=\"https://stackoverflow.com/users/13722108/shadorain\">Shadorain</a></dd>\n <dt>Discord</dt>\n <dd>https://discordapp.com/users/Shadorain#4182</dd>\n <dt>IRC (Freenode)</dt>\n <dd>Shadorain / Shadowraith / ShadorainPhone</dd>\n <dt>Hack the Box</dt>\n <dd><script src=\"https://www.hackthebox.eu/badge/85748\"></script>\n Lol dont make fun of my low score, i havent done much in small amounts of time so my rank keeps resetting </dd>\n</dl>\n","dir":"/","name":"about.md","path":"about.md","url":"/about.html"}]