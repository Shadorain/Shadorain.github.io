[{"layout":"default","author":"Shadorain","title":"Assembler","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"assembler\">Assembler</h1>\n","dir":"/blog/Assembly/","name":"index.md","path":"blog/Assembly/index.md","url":"/blog/Assembly/"},{"layout":"default","author":"Shadorain","title":"Dynamic Memory Allocation","nav_order":5,"parent":"CLang","has_children":true,"content":"<h1 class=\"no_toc\" id=\"dynamic-memory-allocation\">Dynamic Memory Allocation</h1>\n<h3 class=\"no_toc\" id=\"lets-take-a-look-at-malloc-calloc-realloc-and-free\">Lets take a look at: <em>malloc</em>, <em>calloc</em>, <em>realloc</em>, and <em>free</em></h3>\n\n<hr />\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ul id=\"markdown-toc\">\n <li><a href=\"#malloc--memory-allocation\" id=\"markdown-toc-malloc--memory-allocation\">Malloc :: Memory Allocation</a></li>\n <li><a href=\"#calloc--contiguous-allocation\" id=\"markdown-toc-calloc--contiguous-allocation\">Calloc :: Contiguous Allocation</a></li>\n <li><a href=\"#realloc--re-allocation\" id=\"markdown-toc-realloc--re-allocation\">Realloc :: Re-Allocation</a></li>\n <li><a href=\"#free\" id=\"markdown-toc-free\">Free</a></li>\n <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a> <ul>\n <li><a href=\"#simple-summary\" id=\"markdown-toc-simple-summary\">Simple Summary</a></li>\n </ul>\n </li>\n</ul>\n\n<hr />\n\n<h3 id=\"malloc--memory-allocation\">Malloc :: Memory Allocation</h3>\n<p><strong>Main point</strong>: In essence, allocates one large block of memory.</p>\n<ul>\n <li>dynamically allocates a single large block of memory with a specified size</li>\n <li>malloc -&gt; void*</li>\n <li>Returns a void pointer, castable into any type</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">int* ptr</code>: defines an int pointer that malloc will return to</li>\n <li><code class=\"language-plaintext highlighter-rouge\">(int*)</code>: type that malloc is being casted to (int ptr)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">100 * sizeof(int)</code>: byte size, <em>100 * 4 = 400B</em></li>\n</ul>\n\n<p>This example, allocates <em>400 bytes</em>, and the int* holds the address of the first byte.</p>\n<blockquote>\n <p>Insufficient space returns a <em>NULL</em> ptr.</p>\n</blockquote>\n\n<hr />\n\n<h3 id=\"calloc--contiguous-allocation\">Calloc :: Contiguous Allocation</h3>\n<p><strong>Main point</strong>: In essence, allocates multiple blocks of memory next to each other (like an array!)</p>\n<ul>\n <li>dynamically allocates a specific number of blocks of memory of specified type</li>\n <li>initializes each block with ‘0’</li>\n <li>calloc -&gt; void*</li>\n <li>Returns a void pointer, castable into any type</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax-1\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">calloc</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">));</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">float* ptr</code>: defines an int pointer that calloc will return to</li>\n <li><code class=\"language-plaintext highlighter-rouge\">(float*)</code>: type that calloc is being casted to (float ptr)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">15</code>: amount of blocks to create</li>\n <li><code class=\"language-plaintext highlighter-rouge\">sizeof(float)</code>: block size, a float is <em>4B</em>\n This example, allocates 15 blocks of memory each being 4B in size.\n <blockquote>\n <p>Insufficient space returns a <em>NULL</em> ptr.</p>\n </blockquote>\n </li>\n</ul>\n\n<hr />\n\n<h3 id=\"realloc--re-allocation\">Realloc :: Re-Allocation</h3>\n<p><strong>Main point</strong>: In essence, re-allocates what originally was allocated.</p>\n<ul>\n <li>dynamically change memory allocation of previously allocated memory</li>\n <li>re-initializes each block with ‘0’</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax-2\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">));</span>\n<span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">realloc</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"mi\">50</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">));</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">char* ptr = (char*) malloc(10 * sizeof(char));</code>: This allocates our block to change, char ptr <em>10B</em> in size</li>\n <li><code class=\"language-plaintext highlighter-rouge\">(char*)</code>: type that realloc is being casted to (char ptr)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ptr</code>: already allocated memory that we are changing</li>\n <li><code class=\"language-plaintext highlighter-rouge\">50 * sizeof(char)</code>: new block size, <em>50 * 1 = 50B</em>\n This example, re-allocates a char ptr that originally held <em>10B</em> into <em>50B</em>\n <blockquote>\n <p>Insufficient space returns a <em>NULL</em> ptr.</p>\n </blockquote>\n </li>\n</ul>\n\n<hr />\n\n<h3 id=\"free\">Free</h3>\n<p><strong>Main point</strong>: In essence, dynamically de-allocates memory.</p>\n<ul>\n <li>Good practice is to use this when done with allocated memory to save resources</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax-3\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">int* ptr = (int*) malloc(4 * sizeof(int));</code>: This allocates our block to free, int ptr <em>16B</em> in size</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ptr</code>: allocated memory to release\n This example, de-allocates the allocated memory of <em>ptr</em> the int<em>, giving up the memory address that *ptr</em> held and is set to <em>NULL</em></li>\n</ul>\n\n<hr />\n\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Hopefully, here I was able to show how important dynamic allocation is to your project that you are working on in the beautiful language of C. Most other languages automatically do all memory operations themselves and make it easy for the programmer, but having this level of control on each bit can both be a wonderful blessing or devastating curse.</p>\n\n<h4 id=\"simple-summary\">Simple Summary</h4>\n<dl>\n <dt>Malloc</dt>\n <dd>Allocates one large block of memory of a specified bitsize</dd>\n <dt>Calloc</dt>\n <dd>Allocates contiguos memory blocks of a specified bitsize (similar to an array)</dd>\n <dt>Realloc</dt>\n <dd>Re-allocates a block/s of memory that have previously been allocated</dd>\n <dt>Free</dt>\n <dd>Releases allocated memory back to the stack/heap cleaning up resources</dd>\n</dl>\n\n<hr />\n\n<h6 class=\"no_toc\" id=\"resources-used\">Resources Used</h6>\n<ul>\n <li><a href=\"https://en.cppreference.com/w/c/memory\">C Reference</a></li>\n <li><a href=\"https://www.geeksforgeeks.org/dynamic-memory-allocation-in-c-using-malloc-calloc-free-and-realloc/\">Geeks for Geeks</a></li>\n</ul>\n","dir":"/blog/CLang/","name":"dynam-mem-alloc.md","path":"blog/CLang/dynam-mem-alloc.md","url":"/blog/CLang/dynam-mem-alloc.html"},{"layout":"default","author":"Shadorain","title":"C Language","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"c-language\">C Language</h1>\n","dir":"/blog/CLang/","name":"index.md","path":"blog/CLang/index.md","url":"/blog/CLang/"},{"layout":"default","author":"Shadorain","title":"Test","parent":"C Language","grand_parent":"My Blog","permalink":"/docs/blog/CLang/Test/","content":"# Test\n\n","dir":"/docs/blog/CLang/Test/","name":"test.md","path":"blog/CLang/test.md","url":"/docs/blog/CLang/Test/"},{"layout":"default","author":"Shadorain","title":"Emacs","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"emacs\">Emacs</h1>\n","dir":"/blog/Emacs/","name":"index.md","path":"blog/Emacs/index.md","url":"/blog/Emacs/"},{"layout":"default","author":"Shadorain","title":"Haskell","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"haskell\">Haskell</h1>\n","dir":"/blog/Haskell/","name":"index.md","path":"blog/Haskell/index.md","url":"/blog/Haskell/"},{"layout":"default","author":"Shadorain","title":"LaTeX","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"latex\">LaTeX</h1>\n","dir":"/blog/Latex/","name":"index.md","path":"blog/Latex/index.md","url":"/blog/Latex/"},{"layout":"default","author":"Shadorain","title":"Hardening Linux","nav_order":5,"parent":"Linux","has_children":true,"content":"<h1 class=\"no_toc\" id=\"hardening-linux\">Hardening Linux</h1>\n<h5 class=\"no_toc\" id=\"in-this-post-we-take-a-look-at\">In this post we take a look at:</h5>\n\n<dl class=\"no_toc\">\n <dt>Userspace</dt>\n <dd><a href=\"#apparmor\">AppArmor</a></dd>\n <dd><a href=\"#firejail\">FireJail</a></dd>\n <dd><a href=\"#rkhunter\">RKHunter</a></dd>\n <dt>Kernel</dt>\n <dd><a href=\"#patches\">Custom Security Patches</a></dd>\n <dt>Network</dt>\n <dd><a href=\"#firewall\">Firewall and new DNS</a></dd>\n</dl>\n\n<hr />\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ul id=\"markdown-toc\">\n <li><a href=\"#userspace\" id=\"markdown-toc-userspace\">Userspace</a></li>\n <li><a href=\"#network\" id=\"markdown-toc-network\">Network</a></li>\n <li><a href=\"#kernel\" id=\"markdown-toc-kernel\">Kernel</a></li>\n</ul>\n\n<hr />\n\n<h3 id=\"userspace\">Userspace</h3>\n<p><strong>The userspace is where all our typical applications will run on our machine, so we definitely need to implement security here.</strong>\nThere are two FOSS (Free and Open Source) pieces of software that I believe are at the top of the list past SELinux for what we need:</p>\n<ul>\n <li>AppArmor</li>\n <li>FireJail\n<pre><code class=\"language-note\">To install these, check in your repo what their package names are. On XBPS (Void Linux) they are simply `apparmor` and `firejail`.\n</code></pre>\n </li>\n</ul>\n\n<h4 class=\"no_toc\" id=\"apparmor\">Apparmor</h4>\n<p>AppArmor is quite self explanatory to set up quite frankly, and honestly the defaults are all you need for a desktop system.\nLet’s first check if it is enabled:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>aa-enabled\nYes\n</code></pre></div></div>\n\n<blockquote>\n <p>If you get an error here then good that just means we have to set it up. If you get Yes, then you can skip this section.</p>\n</blockquote>\n\n<p>First, we have to send some commands to our kernel, the simplest way to do this is via GRUB, if you use a different bootloader skip to <a href=\"#different-bootloader\">Different Bootloader</a>.</p>\n\n<h6 class=\"no_toc\" id=\"grub\">GRUB</h6>\n<pre><code class=\"language-tip\">Use your editor of choice, I prefer and recommend Neovim which is aliased to `vim` on my system, which I will use throughout all blogposts.\n</code></pre>\n<p>To edit our grub kernel commandline, we must go into <code class=\"language-plaintext highlighter-rouge\">/etc/default/grub</code></p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>vim /etc/default/grub\n</code></pre></div></div>\n\n<p>Find, the line with <code class=\"language-plaintext highlighter-rouge\">GRUB_CMDLINE_LINUX_DEFAULT</code> and at the end we need to add two parameters, <code class=\"language-plaintext highlighter-rouge\">apparmor=1</code> and <code class=\"language-plaintext highlighter-rouge\">security=apparmor</code>.</p>\n\n<p>Here is how my <code class=\"language-plaintext highlighter-rouge\">/etc/default/grub</code> file looks. Take note of the last two parameters of <code class=\"language-plaintext highlighter-rouge\">GRUB_CMDLINE_LINUX_DEFAULT</code>.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#</span>\n<span class=\"c\"># Configuration file for GRUB.</span>\n<span class=\"c\">#</span>\n<span class=\"nv\">GRUB_DEFAULT</span><span class=\"o\">=</span>0\n<span class=\"c\">#GRUB_HIDDEN_TIMEOUT=0</span>\n<span class=\"c\">#GRUB_HIDDEN_TIMEOUT_QUIET=false</span>\n<span class=\"nv\">GRUB_TIMEOUT</span><span class=\"o\">=</span>5\n<span class=\"nv\">GRUB_DISTRIBUTOR</span><span class=\"o\">=</span><span class=\"s2\">\"Void\"</span>\n<span class=\"nv\">GRUB_CMDLINE_LINUX_DEFAULT</span><span class=\"o\">=</span><span class=\"s2\">\"loglevel=4 slub_debug=P page_poison=1 net.ifnames=0 apparmor=1 security=apparmor\"</span>\n<span class=\"c\"># Uncomment to use basic console</span>\n<span class=\"c\">#GRUB_TERMINAL_INPUT=\"console\"</span>\n<span class=\"c\"># Uncomment to disable graphical terminal</span>\n<span class=\"c\">#GRUB_TERMINAL_OUTPUT=console</span>\n<span class=\"c\">#GRUB_BACKGROUND=/usr/share/void-artwork/splash.png</span>\n<span class=\"c\">#GRUB_GFXMODE=1920x1080x32</span>\n<span class=\"c\">#GRUB_DISABLE_LINUX_UUID=true</span>\n<span class=\"c\">#GRUB_DISABLE_RECOVERY=true</span>\n<span class=\"c\"># Uncomment and set to the desired menu colors.  Used by normal and wallpaper</span>\n<span class=\"c\"># modes only.  Entries specified as foreground/background.</span>\n<span class=\"c\">#GRUB_COLOR_NORMAL=\"light-blue/black\"</span>\n<span class=\"c\">#GRUB_COLOR_HIGHLIGHT=\"light-cyan/blue\"</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>update-grub\n❱ <span class=\"nb\">sudo </span>shutdown <span class=\"nt\">-r</span> now\n</code></pre></div></div>\n<p>This will enable the AppArmor module in the kernel from the GRUB bootloader commandline.</p>\n\n<h6 class=\"no_toc\" id=\"different-bootloader\">Different Bootloader</h6>\n<p>There are quite a large number of bootloader’s out there so I will only cover grub here in how to do it, but the options are the same.</p>\n\n<p>Here is a <a href=\"https://wiki.archlinux.org/index.php/Kernel_parameters\">link</a> on how to send commands to the kernel from different bootloaders. The commands required for AppArmor to run and function are: <code class=\"language-plaintext highlighter-rouge\">apparmor=1</code> and <code class=\"language-plaintext highlighter-rouge\">security=apparmor</code></p>\n\n<h5 class=\"no_toc\" id=\"enable-and-enforce\">Enable and Enforce</h5>\n<p>Now that we have allowed AppArmor from the kernel, its time to Enable and Enforce!</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>aa-enforce /etc/apparmor.d/<span class=\"k\">*</span>\n</code></pre></div></div>\n<p>This command employs all the default AppArmor settings that are set in <code class=\"language-plaintext highlighter-rouge\">/etc/apparmor.d/</code>.</p>\n\n<blockquote>\n <p>This is an important directory to keep in mind because if there is not a default configuration file for a specific application,\nthen you will need to make your own to begin enforcement of any policies on that specific application.</p>\n</blockquote>\n\n<p>Finally, it is time to set AppArmor to enforce policies.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>vim /etc/default/apparmor\n</code></pre></div></div>\n<p>Edit the file to look like this: (note you do not need the comments, just the final line)</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># AppArmor configuration</span>\n\n<span class=\"c\"># Possible options:</span>\n<span class=\"c\"># - disable</span>\n<span class=\"c\"># - complain</span>\n<span class=\"c\"># - enforce</span>\n<span class=\"nv\">APPARMOR</span><span class=\"o\">=</span>enforce\n</code></pre></div></div>\n<p>Save and exit (<code class=\"language-plaintext highlighter-rouge\">ESC :wq</code>)</p>\n\n<h5 class=\"no_toc\" id=\"finish-up\">Finish up</h5>\n<p>Finally all you have to do is first, reboot your system.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>shutdown <span class=\"nt\">-r</span> now\n</code></pre></div></div>\n<p>During the bootup process watch closely before it displays the login tty or display manager.\nIf setup correctly, there should have been some apparmor messages.</p>\n\n<p>But this isn’t a reliable way of checking, here are two ways (advice using both) to check if it is running and enforcing policies:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">❱ sudo aa-enabled</code> If this displays <code class=\"language-plaintext highlighter-rouge\">Yes</code> then it is active, but this isn’t enough…</li>\n <li><code class=\"language-plaintext highlighter-rouge\">❱ sudo apparmor_status | less</code> If this displays a whole list of programs then you are all set!</li>\n</ul>\n\n<p>Congratulations, you now have AppArmor installed into your kernel and enforcing security policies on your system. Not so hard after all! There is definitely a lot more too it though so be sure to go through <code class=\"language-plaintext highlighter-rouge\">/etc/apparmor.d/</code> and add your own application configs.</p>\n\n<h4 class=\"no_toc\" id=\"firejail\">FireJail</h4>\n<p><em>Firejail</em> is a program that essentially <strong>sandboxes</strong> any program that is run with it which means that the program can only access directly what it needs and nothing else. This is an effective security measure because if an attacker for example is able to exploit your web browser or a page, they cannot go very far because the browser itself is locked to only it’s needed files.</p>\n\n<p><em>FireJail</em> is simple to start using, but there is a lot more to it past what this post will cover. First, install it from your repo (<a href=\"#userspace\">see above</a>).</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ firejail <span class=\"nt\">--seccomp</span> <span class=\"nt\">--nonewprivs</span> <span class=\"nt\">--private-tmp</span> &lt;program&gt;\n</code></pre></div></div>\n<p>This honestly is the only command I use and it has done a good job so far. In my window manager (xmonad) I have this line prepended in every keybind that opens any program, including my terminal, browser, dmenu, everything.</p>\n\n<p>I yet have noticed any performance issues, everything has run smooth and without errors. The only programs I believe this could cause malfunction would be those that dynamically call to different libraries or similar. Give this one a good tryout though, definitely think it to be quite helpful in adding another layer of security.</p>\n\n<h4 class=\"no_toc\" id=\"rkhunter\">RKHunter</h4>\n<p><em>RKHunter</em> stands for RootKit Hunter, and this is an incredible tool that looks for any signs of rootkit infections on your system.</p>\n<pre><code class=\"language-danger\">A RootKit is a form of malware that gives an attacker continued escalated priviledge access to a computer. These are extremely dangerous and can give the attacker access to everything.\n</code></pre>\n<p>Install this from your repo, the package name should simply be <code class=\"language-plaintext highlighter-rouge\">rkhunter</code>, if not, try <code class=\"language-plaintext highlighter-rouge\">rootkit-hunter</code>.\nFirst, before anything else, make sure to update our rkhunter <em>properties database</em>.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ rkhunter <span class=\"nt\">--propupd</span>\n</code></pre></div></div>\n<p>Now we can run the check on our system.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ rkhunter <span class=\"nt\">--check</span>\n</code></pre></div></div>\n<p>This will wait for user interaction every few lines to make sure that nothing is missed from it. Be sure to watch the right line for any “Warning” or “Dangerous” signs.</p>\n\n<p>Once the check is complete, if there were any suspicious binaries we can look in the log file to see more information:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo cat</span> /var/log/rkhunter.log | less\n</code></pre></div></div>\n\n<p>Lastly, to quelch any false Warnings (egrep, fgrep, ldd, and some others) simply set them to be whitelisted in our rkhunter config:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>vim /etc/rkhunter.conf\n</code></pre></div></div>\n<p>Add these lines to whitelist:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">SCRIPTWHITELIST</span><span class=\"o\">=</span>/usr/bin/egrep\n<span class=\"nv\">SCRIPTWHITELIST</span><span class=\"o\">=</span>/usr/bin/fgrep\n<span class=\"nv\">SCRIPTWHITELIST</span><span class=\"o\">=</span>/usr/bin/ldd\n</code></pre></div></div>\n<p>These are false positives because after the base system has been installed, these binaries are swapped with scripts which sengs a flag to rkhunter, but these are not malicious, unless…</p>\n\n<p><em>RKHunter</em> is a simple and very powerful tool to keep a watchful eye on various system binaries. Be sure to use it after installing anything that just didn’t seem fully trust worthy.</p>\n\n<h3 id=\"network\">Network</h3>\n<h4 class=\"no_toc\" id=\"reconfigure-dns\">Reconfigure DNS</h4>\n<p>I personally trust Cloudflare to set my DNS to the most. They run <code class=\"language-plaintext highlighter-rouge\">nginx</code> for their server which is under a <em>BSD</em> Liscence, and they promote Free Software alot. On top of this though, their network practically acts like a large VPN, and come with some nice security protocols as well, some being a Firewall and DDOS protection.</p>\n\n<p>Let’s set it here:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>vim /etc/resolv.conf\n</code></pre></div></div>\n\n<p>Depening, your file should be pretty minimal, edit <code class=\"language-plaintext highlighter-rouge\">nameserver &lt;ip&gt;</code> to <code class=\"language-plaintext highlighter-rouge\">nameserver 1.1.1.1</code> (Cloudflares IP).\nYour file should look similar to:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>search fios-router.home\nnameserver 1.1.1.1\n</code></pre></div></div>\n\n<pre><code class=\"language-warning\">If you use NetworkManager, you will need to configure it to not reconfigure your 'resolv.conf' on reboot. To do this, add the line `dns=none` under [main] in /etc/NetworkManager/NetworkManager.conf\n</code></pre>\n\n<h4 class=\"no_toc\" id=\"setup-ufw-firewall\">Setup UFW Firewall</h4>\n<p><code class=\"language-plaintext highlighter-rouge\">ufw</code> is an awesome tool. It stands for “uncomplicated firewall” because for real, it isn’t that complicated, but there is a load of great features and tools with it.</p>\n\n<p>Again, install it from your repo (<a href=\"#userspace\">see above</a>). And its time to turn off everything so be prepared to not have any connection!</p>\n\n<p>First, find what your network interface is, I set it to a variable here so that you can simply copy and paste the later commands:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ ip <span class=\"nb\">link</span>   <span class=\"c\"># If wireless, your card may look like i.e. `wlan0` or `wlp0s20f3` </span>\n            <span class=\"c\"># If ethernet, your card may look like i.e. `eth0` or `elp0s20f3`</span>\n❱ <span class=\"nv\">MY_INTERFACE</span><span class=\"o\">=</span>wlan0    <span class=\"c\"># put your interface instead of `wlan0`</span>\n</code></pre></div></div>\n\n<p>To enable <code class=\"language-plaintext highlighter-rouge\">ufw</code> run:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>ufw <span class=\"nb\">enable</span>\n</code></pre></div></div>\n\n<p>Here we disallow all traffic, nothing in nothing out:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>ufw default deny incoming\n❱ <span class=\"nb\">sudo </span>ufw default deny forwarding\n❱ <span class=\"nb\">sudo </span>ufw default deny outgoing\n</code></pre></div></div>\n\n<p>Next, we obviously don’t want to be completely locked away from the internet, so we set some openings:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>ufw allow out on <span class=\"nv\">$MY_INTERFACE</span> to 1.1.1.1 proto udp port 53 comment <span class=\"s1\">'Allows dns on interface'</span>\n❱ <span class=\"nb\">sudo </span>ufw allow out on <span class=\"nv\">$MY_INTERFACE</span> to any proto tcp port 80 comment <span class=\"s1\">'Allows HTTP on interface'</span>\n❱ <span class=\"nb\">sudo </span>ufw allow out on <span class=\"nv\">$MY_INTERFACE</span> to any proto tcp port 443 comment <span class=\"s1\">'Allows HTTPS on interface'</span>\n</code></pre></div></div>\n<ul>\n <li>We allow only traffic through our current DNS which is Cloudflare in this case (1.1.1.1) on port UDP:53.</li>\n <li>Then allow all HTTP and HTTPS traffic on TCP:80 and TCP:443.</li>\n <li>These only apply to our current interface as well, the others are still locked down.</li>\n <li>Should now be able to go to a webpage.</li>\n</ul>\n\n<p>Finally, we need to enable the <code class=\"language-plaintext highlighter-rouge\">ufw</code> service to start at startup:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># This command only works with the Runit Init System</span>\n❱ <span class=\"nb\">sudo ln</span> <span class=\"nt\">-s</span> /etc/sv/ufw /var/service   <span class=\"c\"># enables at startup</span>\n❱ <span class=\"nb\">sudo </span>sv up ufw    <span class=\"c\"># starts service now</span>\n</code></pre></div></div>\n\n<p>If you run <em>systemd</em> the command will be along the lines of:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❱ <span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable </span>ufw     <span class=\"c\"># enables at startup</span>\n❱ <span class=\"nb\">sudo </span>systemctl start ufw      <span class=\"c\"># starts service now</span>\n</code></pre></div></div>\n\n<p>There you have it, your <em>uncomplicated firewall</em> is now setup and enabled at startup. There are many more configuration options, but this is plenty enough for the casual desktop user.</p>\n\n<h3 id=\"kernel\">Kernel</h3>\n<p>Not yet done myself! Coming soon…</p>\n","dir":"/blog/Linux/","name":"hardening.md","path":"blog/Linux/hardening.md","url":"/blog/Linux/hardening.html"},{"layout":"default","author":"Shadorain","title":"Linux","content":"<h1 id=\"linux\">Linux</h1>\n","dir":"/blog/Linux/","name":"index.md","path":"blog/Linux/index.md","url":"/blog/Linux/"},{"layout":"default","author":"Shadorain","title":"Reversing","nav_order":0,"permalink":"/blog/Security/Reversing/","grand_parent":"My Blog","parent":"Security","has_children":true,"content":"<h1 class=\"no_toc\" id=\"reverse-engineering\">Reverse Engineering</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#test\" id=\"markdown-toc-test\">TEST</a></li>\n</ol>\n\n<hr />\n\n<h2 id=\"test\">TEST</h2>\n","dir":"/blog/Security/Reversing/","name":"index.md","path":"blog/Security/Reversing/index.md","url":"/blog/Security/Reversing/"},{"layout":"default","author":"Shadorain","title":"Exploiting LXD","permalink":"/blog/Security/Exploiting-LXD/","grand_parent":"My Blog","parent":"Security","has_children":false,"content":"<h1 class=\"no_toc\" id=\"exploiting-lxd\">Exploiting LXD</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#what-is-lxd\" id=\"markdown-toc-what-is-lxd\">What is LXD?</a></li>\n <li><a href=\"#exploitation\" id=\"markdown-toc-exploitation\">Exploitation</a> <ol>\n <li><a href=\"#checks\" id=\"markdown-toc-checks\">Checks</a></li>\n </ol>\n </li>\n</ol>\n\n<hr />\n\n<h2 id=\"what-is-lxd\">What is LXD?</h2>\n\n<h2 id=\"exploitation\">Exploitation</h2>\n<h3 id=\"checks\">Checks</h3>\n<p>First check if LXD is even on the machine you are attempting to attack. You can do this by running <code class=\"language-plaintext highlighter-rouge\">id</code>:<br />\n <code class=\"language-plaintext highlighter-rouge\">uid=1000(shado) gid=1000(shado) groups=1000(shado),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)</code></p>\n\n<p>Test https://www.hackingarticles.in/lxd-privilege-escalation/</p>\n","dir":"/blog/Security/Exploiting-LXD/","name":"exploit-lxd.md","path":"blog/Security/exploit-lxd.md","url":"/blog/Security/Exploiting-LXD/"},{"layout":"default","author":"Shadorain","title":"Security","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"security\">Security</h1>\n","dir":"/blog/Security/","name":"index.md","path":"blog/Security/index.md","url":"/blog/Security/"},{"layout":"default","author":"Shadorain","title":"Vim / Neovim","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"vim--neovim\">Vim / Neovim</h1>\n","dir":"/blog/Vim/","name":"index.md","path":"blog/Vim/index.md","url":"/blog/Vim/"},{"layout":"default","author":"Shadorain","title":"Window Managers","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"window-managers\">Window Managers</h1>\n","dir":"/blog/Window_Managers/","name":"index.md","path":"blog/Window_Managers/index.md","url":"/blog/Window_Managers/"},{"layout":"default","author":"Shadorain","title":"My Blog","sort":1,"permalink":"/blog/","content":"<h1 id=\"my-blog\">My Blog</h1>\n\n<ul>\n <li><a href=\"/blog/Assembly/\">Assembler</a></li>\n <li><a href=\"/blog/CLang/\">C Language</a>\n <ul>\n <li><a href=\"/blog/CLang/dynam-mem-alloc.html\">Dynamic Memory Allocation</a></li>\n </ul>\n </li>\n <li><a href=\"/blog/Emacs/\">Emacs</a></li>\n <li><a href=\"/blog/Haskell/\">Haskell</a></li>\n <li><a href=\"/blog/Latex/\">LaTeX</a></li>\n <li><a href=\"/blog/Linux/\">Linux</a>\n <ul>\n <li><a href=\"/blog/Linux/hardening.html\">Hardening Linux</a></li>\n </ul>\n </li>\n <li><a href=\"/blog/Security/\">Security</a>\n <ul>\n <li><a href=\"/blog/Security/Reversing/\">Reversing</a></li>\n <li><a href=\"/blog/Security/Exploiting-LXD/\">Exploiting LXD</a></li>\n </ul>\n </li>\n <li><a href=\"/blog/Vim/\">Vim / Neovim</a></li>\n <li><a href=\"/blog/Window_Managers/\">Window Managers</a></li>\n</ul>\n","dir":"/blog/","name":"README.md","path":"blog/README.md","url":"/blog/"},{"layout":"default","author":"Shadorain","title":"Home","sort":1,"permalink":"/index.html","content":"<h1 class=\"fs-9\" id=\"shadohub-the-hub-for-shadows\">Shadohub, the hub for shadows!</h1>\n\n<p class=\"fs-6 fw-300\">Hello! Welcome to my site! \nHere i cover some cool topics in my blog, and also hope to grow this site to be much more as well!</p>\n\n<p><a href=\"/blog/\" class=\"btn btn-primary fs-5 mb-4 mb-md-0 mr-2\">My Blog</a> <a href=\"https://github.com/Shadorain/\" class=\"btn fs-5 mb-4 mb-md-0\">Check out my GitHub</a></p>\n\n<hr />\n\n<h2 id=\"getting-started\">Getting started</h2>\n<p>This site shouldnt be too complicated to navigate.\nClick the button above or the menu on the side named <code class=\"language-plaintext highlighter-rouge\">My Blog</code> to get to my blog.\nOther things will come, some ideas are down below! My contact info is at the bottom of <a href=\"/about.html\">About</a></p>\n\n<h2 id=\"site-ideas\">Site Ideas</h2>\n<ul>\n <li>Host a CTF on here, or atleast challenges!</li>\n <li>Discussion Forum</li>\n <li>Coding competitions?</li>\n <li>And some more to come…</li>\n</ul>\n\n<p><img src=\"/assets/images/logo.png\" style=\"display:block;margin-left:auto;margin-right:auto;width:50%;\" /></p>\n","dir":"/","name":"index.md","path":"index.md","url":"/index.html"},{"layout":"default","author":"Shadorain","title":"About","sort":99,"content":"<h1 class=\"no_toc\" id=\"about\">About</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#god-first\" id=\"markdown-toc-god-first\">God First</a></li>\n <li><a href=\"#who-am-i\" id=\"markdown-toc-who-am-i\">Who am I</a></li>\n <li><a href=\"#hobbies\" id=\"markdown-toc-hobbies\">Hobbies</a> <ol>\n <li><a href=\"#what-i-run\" id=\"markdown-toc-what-i-run\">What i run</a></li>\n <li><a href=\"#security\" id=\"markdown-toc-security\">Security</a></li>\n </ol>\n </li>\n <li><a href=\"#contact-info\" id=\"markdown-toc-contact-info\">Contact Info</a></li>\n</ol>\n\n<hr />\n\n<h2 id=\"god-first\">God First</h2>\n<p>Christ is my Savior, and He will stay that for all of eternity. Feel free to email or message me and I will always be glad to talk to you about my Lord and Savior. Jesus comes before all else to me.</p>\n\n<hr />\n\n<h2 id=\"who-am-i\">Who am I</h2>\n<p><strong>Name:</strong> Jordan Ferraris<br />\n <strong>Age:</strong> 19<br />\n <strong>School:</strong> Geneva College<br />\n <strong>Year:</strong> Sophomore<br />\n <strong>Studies:</strong> Computer Science with a masters in Cyber Sec, most of my studies though are solo</p>\n\n<hr />\n\n<h2 id=\"hobbies\">Hobbies</h2>\n<h3 id=\"what-i-run\">What i run</h3>\n<p>Currently, I dual boot Gentoo with Void Linux, both of which are fabulous OS’s and quite minimal. Gentoo intrigues me daily with its solely source based repositories allowing for fully unique binaries in my system which increases security and much more. I enjoy ricing my system up quite alot as well, gotta be pretty (pretty good too)! \nHere is a breakdown:</p>\n<ul>\n <li>Linux (custom kernel on gentoo)</li>\n <li>Tiling Window Managers (Xmonad[main], dwm, bspwm)</li>\n <li>Vim/Neovim for all, but Emacs Org-mode for school or notes</li>\n <li>Purple is my favorite color in almost all shades so I created a custom colorscheme to match this!</li>\n</ul>\n\n<h3 id=\"security\">Security</h3>\n<p>I love all things low level (low level meaning as close to the machine code as one can get). Whether that is C language or Assembly. Within security topic, Reversing and Binary Exploitation have been quite intriguing to me. Either this or Kernel/Driver development is what I would like to pursue.\nI’m not incopetent in other sects of security though, I understand networking and general penetration testing well also but I mainly stick to the more Computer Science geared side of Security.</p>\n\n<hr />\n\n<h2 id=\"contact-info\">Contact Info</h2>\n<dl>\n <dt>GitHub</dt>\n <dd><a href=\"https://github.com/Shadorain/\">Shadorain</a></dd>\n <dt>Emails</dt>\n <dd><a href=\"mailto: shadorain7517@gmail.com\">Common</a><br />\n <a href=\"mailto: jordanf7517@gmail.com\">Personal</a></dd>\n <dt>Phone</dt>\n <dd>201-841-8296</dd>\n <dt>LinkedIn</dt>\n <dd><a href=\"https://www.linkedin.com/in/jordan-ferraris-8b3219188/\">Jordan Ferraris</a></dd>\n <dt>Stack Overflow</dt>\n <dd><a href=\"https://stackoverflow.com/users/13722108/shadorain\">Shadorain</a></dd>\n <dt>Discord</dt>\n <dd>https://discordapp.com/users/Shadorain#4182</dd>\n <dt>IRC (Freenode)</dt>\n <dd>Shadorain / Shadowraith / ShadorainPhone</dd>\n <dt>Hack the Box</dt>\n <dd><script src=\"https://www.hackthebox.eu/badge/85748\"></script>\n Lol dont make fun of my low score, i havent done much in small amounts of time so my rank keeps resetting </dd>\n</dl>\n","dir":"/","name":"about.md","path":"about.md","url":"/about.html"}]