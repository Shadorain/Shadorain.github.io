[{"layout":"default","author":"Shadorain","title":"Assembler","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"assembler\">Assembler</h1>\n","dir":"/blog/Assembly/","name":"index.md","path":"blog/Assembly/index.md","url":"/blog/Assembly/"},{"layout":"default","author":"Shadorain","title":"Dynamic Memory Allocation","nav_order":5,"parent":"CLang","has_children":true,"content":"<h1 class=\"no_toc\" id=\"dynamic-memory-allocation\">Dynamic Memory Allocation</h1>\n<h3 class=\"no_toc\" id=\"lets-take-a-look-at-malloc-calloc-realloc-and-free\">Lets take a look at: <em>malloc</em>, <em>calloc</em>, <em>realloc</em>, and <em>free</em></h3>\n\n<hr />\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ul id=\"markdown-toc\">\n <li><a href=\"#malloc--memory-allocation\" id=\"markdown-toc-malloc--memory-allocation\">Malloc :: Memory Allocation</a></li>\n <li><a href=\"#calloc--contiguous-allocation\" id=\"markdown-toc-calloc--contiguous-allocation\">Calloc :: Contiguous Allocation</a></li>\n <li><a href=\"#realloc--re-allocation\" id=\"markdown-toc-realloc--re-allocation\">Realloc :: Re-Allocation</a></li>\n <li><a href=\"#free\" id=\"markdown-toc-free\">Free</a></li>\n <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a> <ul>\n <li><a href=\"#simple-summary\" id=\"markdown-toc-simple-summary\">Simple Summary</a></li>\n </ul>\n </li>\n</ul>\n\n<hr />\n\n<h3 id=\"malloc--memory-allocation\">Malloc :: Memory Allocation</h3>\n<p><strong>Main point</strong>: In essence, allocates one large block of memory.</p>\n<ul>\n <li>dynamically allocates a single large block of memory with a specified size</li>\n <li>malloc -&gt; void*</li>\n <li>Returns a void pointer, castable into any type</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">int* ptr</code>: defines an int pointer that malloc will return to</li>\n <li><code class=\"language-plaintext highlighter-rouge\">(int*)</code>: type that malloc is being casted to (int ptr)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">100 * sizeof(int)</code>: byte size, <em>100 * 4 = 400B</em></li>\n</ul>\n\n<p>This example, allocates <em>400 bytes</em>, and the int* holds the address of the first byte.</p>\n<blockquote>\n <p>Insufficient space returns a <em>NULL</em> ptr.</p>\n</blockquote>\n\n<hr />\n\n<h3 id=\"calloc--contiguous-allocation\">Calloc :: Contiguous Allocation</h3>\n<p><strong>Main point</strong>: In essence, allocates multiple blocks of memory next to each other (like an array!)</p>\n<ul>\n <li>dynamically allocates a specific number of blocks of memory of specified type</li>\n <li>initializes each block with ‘0’</li>\n <li>calloc -&gt; void*</li>\n <li>Returns a void pointer, castable into any type</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax-1\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">calloc</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">));</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">float* ptr</code>: defines an int pointer that calloc will return to</li>\n <li><code class=\"language-plaintext highlighter-rouge\">(float*)</code>: type that calloc is being casted to (float ptr)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">15</code>: amount of blocks to create</li>\n <li><code class=\"language-plaintext highlighter-rouge\">sizeof(float)</code>: block size, a float is <em>4B</em>\n This example, allocates 15 blocks of memory each being 4B in size.\n <blockquote>\n <p>Insufficient space returns a <em>NULL</em> ptr.</p>\n </blockquote>\n </li>\n</ul>\n\n<hr />\n\n<h3 id=\"realloc--re-allocation\">Realloc :: Re-Allocation</h3>\n<p><strong>Main point</strong>: In essence, re-allocates what originally was allocated.</p>\n<ul>\n <li>dynamically change memory allocation of previously allocated memory</li>\n <li>re-initializes each block with ‘0’</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax-2\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">));</span>\n<span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">realloc</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"mi\">50</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">));</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">char* ptr = (char*) malloc(10 * sizeof(char));</code>: This allocates our block to change, char ptr <em>10B</em> in size</li>\n <li><code class=\"language-plaintext highlighter-rouge\">(char*)</code>: type that realloc is being casted to (char ptr)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ptr</code>: already allocated memory that we are changing</li>\n <li><code class=\"language-plaintext highlighter-rouge\">50 * sizeof(char)</code>: new block size, <em>50 * 1 = 50B</em>\n This example, re-allocates a char ptr that originally held <em>10B</em> into <em>50B</em>\n <blockquote>\n <p>Insufficient space returns a <em>NULL</em> ptr.</p>\n </blockquote>\n </li>\n</ul>\n\n<hr />\n\n<h3 id=\"free\">Free</h3>\n<p><strong>Main point</strong>: In essence, dynamically de-allocates memory.</p>\n<ul>\n <li>Good practice is to use this when done with allocated memory to save resources</li>\n</ul>\n\n<h5 class=\"no_toc\" id=\"example-syntax-3\">Example Syntax</h5>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n</code></pre></div></div>\n<p>Lets pull this apart:</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">int* ptr = (int*) malloc(4 * sizeof(int));</code>: This allocates our block to free, int ptr <em>16B</em> in size</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ptr</code>: allocated memory to release\n This example, de-allocates the allocated memory of <em>ptr</em> the int<em>, giving up the memory address that *ptr</em> held and is set to <em>NULL</em></li>\n</ul>\n\n<hr />\n\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Hopefully, here I was able to show how important dynamic allocation is to your project that you are working on in the beautiful language of C. Most other languages automatically do all memory operations themselves and make it easy for the programmer, but having this level of control on each bit can both be a wonderful blessing or devastating curse.</p>\n\n<h4 id=\"simple-summary\">Simple Summary</h4>\n<dl>\n <dt>Malloc</dt>\n <dd>Allocates one large block of memory of a specified bitsize</dd>\n <dt>Calloc</dt>\n <dd>Allocates contiguos memory blocks of a specified bitsize (similar to an array)</dd>\n <dt>Realloc</dt>\n <dd>Re-allocates a block/s of memory that have previously been allocated</dd>\n <dt>Free</dt>\n <dd>Releases allocated memory back to the stack/heap cleaning up resources</dd>\n</dl>\n\n<hr />\n\n<h6 class=\"no_toc\" id=\"resources-used\">Resources Used</h6>\n<ul>\n <li><a href=\"https://en.cppreference.com/w/c/memory\">C Reference</a></li>\n <li><a href=\"https://www.geeksforgeeks.org/dynamic-memory-allocation-in-c-using-malloc-calloc-free-and-realloc/\">Geeks for Geeks</a></li>\n</ul>\n","dir":"/blog/CLang/","name":"dynam-mem-alloc.md","path":"blog/CLang/dynam-mem-alloc.md","url":"/blog/CLang/dynam-mem-alloc.html"},{"layout":"default","author":"Shadorain","title":"C Language","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"c-language\">C Language</h1>\n","dir":"/blog/CLang/","name":"index.md","path":"blog/CLang/index.md","url":"/blog/CLang/"},{"layout":"default","author":"Shadorain","title":"Test","parent":"C Language","grand_parent":"My Blog","permalink":"/docs/blog/CLang/Test/","content":"# Test\n\n","dir":"/docs/blog/CLang/Test/","name":"test.md","path":"blog/CLang/test.md","url":"/docs/blog/CLang/Test/"},{"layout":"default","author":"Shadorain","title":"Emacs","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"emacs\">Emacs</h1>\n","dir":"/blog/Emacs/","name":"index.md","path":"blog/Emacs/index.md","url":"/blog/Emacs/"},{"layout":"default","author":"Shadorain","title":"Haskell","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"haskell\">Haskell</h1>\n","dir":"/blog/Haskell/","name":"index.md","path":"blog/Haskell/index.md","url":"/blog/Haskell/"},{"layout":"default","author":"Shadorain","title":"LaTeX","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"latex\">LaTeX</h1>\n","dir":"/blog/Latex/","name":"index.md","path":"blog/Latex/index.md","url":"/blog/Latex/"},{"layout":"default","author":"Shadorain","title":"Linux","content":"<h1 id=\"linux\">Linux</h1>\n","dir":"/blog/Linux/","name":"index.md","path":"blog/Linux/index.md","url":"/blog/Linux/"},{"layout":"default","author":"Shadorain","title":"Reversing","nav_order":0,"permalink":"/blog/Security/Reversing/","grand_parent":"My Blog","parent":"Security","has_children":true,"content":"<h1 class=\"no_toc\" id=\"reverse-engineering\">Reverse Engineering</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#test\" id=\"markdown-toc-test\">TEST</a></li>\n</ol>\n\n<hr />\n\n<h2 id=\"test\">TEST</h2>\n","dir":"/blog/Security/Reversing/","name":"index.md","path":"blog/Security/Reversing/index.md","url":"/blog/Security/Reversing/"},{"layout":"default","author":"Shadorain","title":"Exploiting LXD","permalink":"/blog/Security/Exploiting-LXD/","grand_parent":"My Blog","parent":"Security","has_children":false,"content":"<h1 class=\"no_toc\" id=\"exploiting-lxd\">Exploiting LXD</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#what-is-lxd\" id=\"markdown-toc-what-is-lxd\">What is LXD?</a></li>\n <li><a href=\"#exploitation\" id=\"markdown-toc-exploitation\">Exploitation</a> <ol>\n <li><a href=\"#checks\" id=\"markdown-toc-checks\">Checks</a></li>\n </ol>\n </li>\n</ol>\n\n<hr />\n\n<h2 id=\"what-is-lxd\">What is LXD?</h2>\n\n<h2 id=\"exploitation\">Exploitation</h2>\n<h3 id=\"checks\">Checks</h3>\n<p>First check if LXD is even on the machine you are attempting to attack. You can do this by running <code class=\"language-plaintext highlighter-rouge\">id</code>:<br />\n <code class=\"language-plaintext highlighter-rouge\">uid=1000(shado) gid=1000(shado) groups=1000(shado),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)</code></p>\n\n<p>Test https://www.hackingarticles.in/lxd-privilege-escalation/</p>\n","dir":"/blog/Security/Exploiting-LXD/","name":"exploit-lxd.md","path":"blog/Security/exploit-lxd.md","url":"/blog/Security/Exploiting-LXD/"},{"layout":"default","author":"Shadorain","title":"Security","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"security\">Security</h1>\n","dir":"/blog/Security/","name":"index.md","path":"blog/Security/index.md","url":"/blog/Security/"},{"layout":"default","author":"Shadorain","title":"Vim / Neovim","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"vim--neovim\">Vim / Neovim</h1>\n","dir":"/blog/Vim/","name":"index.md","path":"blog/Vim/index.md","url":"/blog/Vim/"},{"layout":"default","author":"Shadorain","title":"Window Managers","nav_order":5,"parent":"My Blog","has_children":true,"content":"<h1 id=\"window-managers\">Window Managers</h1>\n","dir":"/blog/Window_Managers/","name":"index.md","path":"blog/Window_Managers/index.md","url":"/blog/Window_Managers/"},{"layout":"default","author":"Shadorain","title":"My Blog","sort":1,"permalink":"/blog/","content":"<h1 id=\"my-blog\">My Blog</h1>\n\n<ul>\n <li><a href=\"/blog/Assembly/\">Assembler</a></li>\n <li><a href=\"/blog/CLang/\">C Language</a>\n <ul>\n <li><a href=\"/blog/CLang/dynam-mem-alloc.html\">Dynamic Memory Allocation</a></li>\n </ul>\n </li>\n <li><a href=\"/blog/Emacs/\">Emacs</a></li>\n <li><a href=\"/blog/Haskell/\">Haskell</a></li>\n <li><a href=\"/blog/Latex/\">LaTeX</a></li>\n <li><a href=\"/blog/Linux/\">Linux</a></li>\n <li><a href=\"/blog/Security/\">Security</a>\n <ul>\n <li><a href=\"/blog/Security/Reversing/\">Reversing</a></li>\n <li><a href=\"/blog/Security/Exploiting-LXD/\">Exploiting LXD</a></li>\n </ul>\n </li>\n <li><a href=\"/blog/Vim/\">Vim / Neovim</a></li>\n <li><a href=\"/blog/Window_Managers/\">Window Managers</a></li>\n</ul>\n","dir":"/blog/","name":"README.md","path":"blog/README.md","url":"/blog/"},{"layout":"default","author":"Shadorain","title":"Home","sort":1,"permalink":"/index.html","content":"<h1 class=\"fs-9\" id=\"shadohub-the-hub-for-shadows\">Shadohub, the hub for shadows!</h1>\n\n<p class=\"fs-6 fw-300\">Hello! Welcome to my site! \nHere i cover some cool topics in my blog, and also hope to grow this site to be much more as well!</p>\n\n<p><a href=\"/blog/\" class=\"btn btn-primary fs-5 mb-4 mb-md-0 mr-2\">My Blog</a> <a href=\"https://github.com/Shadorain/\" class=\"btn fs-5 mb-4 mb-md-0\">Check out my GitHub</a></p>\n\n<hr />\n\n<h2 id=\"getting-started\">Getting started</h2>\n<p>This site shouldnt be too complicated to navigate.\nClick the button above or the menu on the side named <code class=\"language-plaintext highlighter-rouge\">My Blog</code> to get to my blog.\nOther things will come, some ideas are down below! My contact info is at the bottom of <a href=\"/about.html\">About</a></p>\n\n<h2 id=\"site-ideas\">Site Ideas</h2>\n<ul>\n <li>Host a CTF on here, or atleast challenges!</li>\n <li>Discussion Forum</li>\n <li>Coding competitions?</li>\n <li>And some more to come…</li>\n</ul>\n\n<p><img src=\"/assets/images/logo.png\" style=\"display:block;margin-left:auto;margin-right:auto;width:50%;\" /></p>\n","dir":"/","name":"index.md","path":"index.md","url":"/index.html"},{"layout":"default","author":"Shadorain","title":"About","sort":99,"content":"<h1 class=\"no_toc\" id=\"about\">About</h1>\n\n<h2 class=\"no_toc text-delta\" id=\"table-of-contents\">Table of contents</h2>\n\n<ol id=\"markdown-toc\">\n <li><a href=\"#god-first\" id=\"markdown-toc-god-first\">God First</a></li>\n <li><a href=\"#who-am-i\" id=\"markdown-toc-who-am-i\">Who am I</a></li>\n <li><a href=\"#hobbies\" id=\"markdown-toc-hobbies\">Hobbies</a> <ol>\n <li><a href=\"#what-i-run\" id=\"markdown-toc-what-i-run\">What i run</a></li>\n <li><a href=\"#security\" id=\"markdown-toc-security\">Security</a></li>\n </ol>\n </li>\n <li><a href=\"#contact-info\" id=\"markdown-toc-contact-info\">Contact Info</a></li>\n</ol>\n\n<hr />\n\n<h2 id=\"god-first\">God First</h2>\n<p>Christ is my Savior, and He will stay that for all of eternity. Feel free to email or message me and I will always be glad to talk to you about my Lord and Savior. Jesus comes before all else to me.</p>\n\n<hr />\n\n<h2 id=\"who-am-i\">Who am I</h2>\n<p><strong>Name:</strong> Jordan Ferraris<br />\n <strong>Age:</strong> 19<br />\n <strong>School:</strong> Geneva College<br />\n <strong>Year:</strong> Sophomore<br />\n <strong>Studies:</strong> Computer Science with a masters in Cyber Sec (with a minor in Psychology actually!), most of my studies though are solo</p>\n\n<hr />\n\n<h2 id=\"hobbies\">Hobbies</h2>\n<h3 id=\"what-i-run\">What i run</h3>\n<p>I currently run Arch linux as my main operating system, even though I would much rather be on LFS. One day when its actually viable as a daily driver! I enjoy ricing my system up quite alot, gotta be pretty (pretty good too)! \nI’m quite an extremist in my tastes and technology philosophy.</p>\n<ul>\n <li>Linux &gt; All other OS’s</li>\n <li>Window Managers &gt; Desktop Environments</li>\n <li>Tiling &gt; Floating windows (of course!)</li>\n <li>Vim + Emacs &gt; All other editors (especially vsc)</li>\n <li>Purple is the best color haha!</li>\n</ul>\n\n<h3 id=\"security\">Security</h3>\n<p>I love all things low level (low level meaning as close to the machine code as one can get). Whether that is C language or Assembly. Within security topic, Reversing and Binary Exploitation have been lethaly intriguing to me. They are what i plan to study mainly and love doing the most with in CTF’s.<br />\nI’m not incopetent in other sects of security, all though I dont enjoy them as much, I understand cryptography and forensics a bit as well as other things. None of which are as cool as rev and binexp though!!</p>\n\n<hr />\n\n<h2 id=\"contact-info\">Contact Info</h2>\n<dl>\n <dt>GitHub</dt>\n <dd><a href=\"https://github.com/Shadorain/\">Shadorain</a></dd>\n <dt>Discord</dt>\n <dd>Shadorain#4182</dd>\n <dt>Emails</dt>\n <dd><a href=\"mailto: shadorain7517@gmail.com\">Common</a><br />\n <a href=\"mailto: jordanf7517@gmail.com\">Personal</a></dd>\n <dt>IRC (Freenode)</dt>\n <dd>Shadorain / Shadowraith / ShadorainPhone</dd>\n <dt>Phone</dt>\n <dd>201-841-8296: I just ask you dont abuse this one :)</dd>\n <dt>Hack the Box</dt>\n <dd><script src=\"https://www.hackthebox.eu/badge/85748\"></script>\n Lol dont make fun of my low score, i havent done much in small amounts of time so my rank keeps resetting </dd>\n <dt>LinkedIn</dt>\n <dd><a href=\"https://www.linkedin.com/in/jordan-ferraris-8b3219188/\">Jordan Ferraris</a></dd>\n</dl>\n","dir":"/","name":"about.md","path":"about.md","url":"/about.html"}]